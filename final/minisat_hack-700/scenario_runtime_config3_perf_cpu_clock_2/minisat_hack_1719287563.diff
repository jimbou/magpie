--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -254,6 +254,7 @@
 
 void Solver::removeClause(CRef cr) {
     Clause& c = ca[cr];
+    assert(c.size() > 1);
 
     /*if (output != NULL) {
       fprintf(output, "d ");
@@ -275,10 +276,7 @@
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)/*auto*/{
       
-        if (value(c[i]) == l_True)/*auto*/{
-            
-            return true;
-        }/*auto*/
+        
     }/*auto*/
     return false; }
 
@@ -698,7 +696,7 @@
 
 void Solver::removeSatisfied(vec<CRef>& cs)
 {
-    int i, j;
+    
     for (i = j = 0; i < cs.size(); i++){
         Clause& c = ca[cs[i]];
         if (satisfied(c))/*auto*/{
@@ -1124,13 +1122,7 @@
                
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-            
-                if (value(c[j]) != l_False)/*auto*/{
-                    
-                    mapVar(var(c[j]), map, max);
-                }/*auto*/
-            }/*auto*/
+            
         }
         
     }/*auto*/
@@ -1168,6 +1160,13 @@
 {
     for (i = 0; i < lF.size(); i++)/*auto*/{
       
+        if (!luby_restart){
+            PUSH(TQ, trail.size(), 5000, tS);
+            if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                
+                lS = 0, LQ.clear();
+            }/*auto*/
+        }
         ca.reloc(lF[i], to);
     }/*auto*/
 
