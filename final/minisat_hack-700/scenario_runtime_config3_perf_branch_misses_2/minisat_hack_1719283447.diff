--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -602,7 +602,8 @@
             // Try to avoid inspecting the clause:
             Lit blocker = i->blocker;
             if (value(blocker) == l_True){
-                *j++ = *i++; continue; }
+                *j++ = *i++;
+                gS += L; continue; }
 
             // Make sure the false literal is data[1]:
             CRef     cr        = i->cref;
@@ -767,7 +768,7 @@
               // Can be turned off.
         removeSatisfied(clauses);
     }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -813,7 +814,7 @@
             }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
+                static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     
                     lS = 0, LQ.clear();
@@ -1148,7 +1149,7 @@
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         
                
-        toDimacs(f, ca[clauses[i]], map, max);
+        
         
     }/*auto*/
 
@@ -1193,10 +1194,22 @@
     for (int i = 0; i < trail.size(); i++){
         Var v = var(trail[i]);
 
-        if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
-            
-            ca.reloc(vardata[v].reason, to);
-        }/*auto*/
+        if (conflicts % 5000 == 0){
+            //learntsize_adjust_confl *= learntsize_adjust_inc;
+            //learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+            //max_learnts             *= learntsize_inc;
+
+            if (verbosity >= 1)/*auto*/{
+                
+                printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                       (int)conflicts, 
+                       (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                       (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                       starts, conflicts / starts,
+                       luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                       (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+            }/*auto*/
+        }
     }
 
     // All learnt:
