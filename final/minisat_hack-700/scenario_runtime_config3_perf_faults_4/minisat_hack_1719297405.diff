--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -879,6 +879,7 @@
             if (luby_restart && conflictC >= nof_conflicts ||
                !luby_restart && LQ.size() == 50 && lS / 50. * K > gS / conflicts){// || !withinBudget()){
                 // Reached bound on number of conflicts:
+                static unsigned LBD_cut, core_added = 0;
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
                 cancelUntil(0);
@@ -1016,12 +1017,7 @@
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("c ============================[ Search Statistics ]==============================\n");
-        printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("c ===============================================================================\n");
-    }
+    
 
     // Search:
     int curr_restarts = 0;
@@ -1072,9 +1068,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c))/*auto*/{
-       return;
-    }/*auto*/
+    
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
       
@@ -1090,6 +1084,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
+    static IntOption    opt_cp_increase        (_cat, "cp-increase", "cp-increase", 15000, IntRange(5000, 50000));
     if (f == NULL)/*auto*/{
       
         fprintf(stderr, "could not open file %s\n", file), exit(1);
@@ -1187,6 +1182,7 @@
             }/*auto*/
         }
     }/*auto*/
+    cancelUntil(0);
 
     // All reasons:
     //
