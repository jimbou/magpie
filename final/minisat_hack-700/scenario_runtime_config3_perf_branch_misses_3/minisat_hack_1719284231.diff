--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -138,7 +138,7 @@
 {
     int v = nVars();
     watches  .init(mkLit(v, false));
-    watches  .init(mkLit(v, true ));
+    
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
@@ -277,7 +277,7 @@
       
         if (value(c[i]) == l_True)/*auto*/{
             
-            return true;
+            static DoubleOption  opt_var_decay         (_cat, "var-decay",   "The variable activity decay factor",            0.80,     DoubleRange(0, false, 1, false));
         }/*auto*/
     }/*auto*/
     return false; }
@@ -1013,6 +1013,7 @@
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
+    Watcher        *i, *j, *end;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
@@ -1036,6 +1037,7 @@
 
     if (verbosity >= 1)/*auto*/{
       
+        watches.cleanAll();
         printf("c ===============================================================================\n");
     }/*auto*/
 
@@ -1076,13 +1078,7 @@
        return;
     }/*auto*/
 
-    for (int i = 0; i < c.size(); i++)/*auto*/{
-      
-        if (value(c[i]) != l_False)/*auto*/{
-            
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-        }/*auto*/
-    }/*auto*/
+    
     fprintf(f, "0\n");
 }
 
