--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -237,7 +237,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
+        learnts_literals += c.size();
     }
 
     if (c.learnt())/*auto*/{
@@ -311,6 +311,7 @@
 
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
+        double  F = 1.0 / nVars();
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])/*auto*/{
             
@@ -445,6 +446,7 @@
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
                         break; }
+                    cp = conflicts + (int32_t)opt_cp_increase;
                 }/*auto*/
             }
         }
@@ -1142,7 +1144,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        var_decay += 0.01;
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
