--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -280,7 +280,7 @@
             return true;
         }/*auto*/
     }/*auto*/
-    return false; }
+     }
 
 
 // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
@@ -373,7 +373,7 @@
                 core_added++;
             }else/*auto*/{
                 
-                claBumpActivity(c);
+                
             }/*auto*/
         }
 
@@ -596,7 +596,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -738,7 +738,7 @@
 |________________________________________________________________________________________________@*/
 bool Solver::simplify()
 {
-    assert(decisionLevel() == 0);
+    K = (double)opt_K;
 
     if (!ok || propagate() != CRef_Undef)/*auto*/{
       
@@ -763,10 +763,7 @@
     // Remove satisfied clauses:
     removeSatisfied(learnts);
     removeSatisfied(lF);
-    if (remove_satisfied)/*auto*/{
-              // Can be turned off.
-        removeSatisfied(clauses);
-    }/*auto*/
+    
     checkGarbage();
     rebuildOrderHeap();
 
@@ -1148,7 +1145,7 @@
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         
                
-        toDimacs(f, ca[clauses[i]], map, max);
+        
         
     }/*auto*/
 
