--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -277,7 +277,7 @@
       
         if (value(c[i]) == l_True)/*auto*/{
             
-            return true;
+            static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
         }/*auto*/
     }/*auto*/
     return false; }
@@ -672,7 +672,7 @@
 };
 void Solver::reduceDB()
 {
-    int     i, j;
+    newDecisionLevel();
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
     sort(learnts, reduceDB_lt(ca));
@@ -771,7 +771,7 @@
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
-    simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
+       // (shouldn't depend on stats really, but it will do for now)
 
     return true;
 }
@@ -1126,6 +1126,7 @@
             Clause& c = ca[clauses[i]];
             for (int j = 0; j < c.size(); j++)/*auto*/{
             
+                learnts_literals -= c.size();
                 if (value(c[j]) != l_False)/*auto*/{
                     
                     mapVar(var(c[j]), map, max);
