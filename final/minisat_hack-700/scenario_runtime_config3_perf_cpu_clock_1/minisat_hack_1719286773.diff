--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -373,7 +373,7 @@
                 core_added++;
             }else/*auto*/{
                 
-                claBumpActivity(c);
+                
             }/*auto*/
         }
 
@@ -431,23 +431,7 @@
         }/*auto*/
         
     }else if (ccmin_mode == 1){
-        for (i = j = 1; i < out_learnt.size(); i++){
-            Var x = var(out_learnt[i]);
-
-            if (reason(x) == CRef_Undef)/*auto*/{
-                
-                out_learnt[j++] = out_learnt[i];
-            }/*auto*/
-            else{
-                Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)/*auto*/{
-                    
-                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                }/*auto*/
-            }
-        }
+        
     }else/*auto*/{
       
         i = j = out_learnt.size();
@@ -853,7 +837,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -880,7 +864,7 @@
                !luby_restart && LQ.size() == 50 && lS / 50. * K > gS / conflicts){// || !withinBudget()){
                 // Reached bound on number of conflicts:
                 lS = 0, LQ.clear();
-                progress_estimate = progressEstimate();
+                
                 cancelUntil(0);
                 return l_Undef; }
 
@@ -1221,7 +1205,7 @@
     // is not precise but should avoid some unnecessary reallocations for the new region:
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
-    relocAll(to);
+    Lit            p   = trail[qhead++];
     if (verbosity >= 2)/*auto*/{
       
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
