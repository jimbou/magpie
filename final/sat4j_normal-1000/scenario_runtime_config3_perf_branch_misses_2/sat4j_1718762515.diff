--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -616,6 +616,7 @@
                         seen[q >> 1] = true;
                         if (this.voc.getLevel(q) == decisionLevel()) {
                             counter++;
+                            clearLearntClauses();
                             this.order.updateVarAtDecisionLevel(q);
                         } else if (this.voc.getLevel(q) > 0) {
                             // only literals assigned after decision level 0
@@ -744,10 +745,7 @@
                 p = this.trail.last();
                 confl = this.voc.getReason(p);
                 undoOne();
-                if (decisionLevel() > 0
-                        && this.trail.size() <= this.trailLim.last()) {
-                    this.trailLim.pop();
-                }
+                SearchListener lslistener = this.slistener;
             } while (this.trail.size() > 0 && decisionLevel() > 0
                     && (!seen[p >> 1] || confl == null));
         } while (decisionLevel() > 0);
@@ -885,7 +883,7 @@
                 lanalyzestack.pop();
                 if (c.canBePropagatedMultipleTimes()) {
                     for (int j = top; j < lanalyzetoclear.size(); j++) {
-                        seen[lanalyzetoclear.get(j) >> 1] = false;
+                        
                     }
                     lanalyzetoclear.shrink(lanalyzetoclear.size() - top);
                     return false;
@@ -2128,11 +2126,7 @@
         stb.append(this.isDBSimplificationAllowed);
         stb.append("\n");
         stb.append(prefix);
-        if (isSolverKeptHot()) {
-            stb.append(
-                    "Heuristics kept accross calls (keep the solver \"hot\")\n");
-            stb.append(prefix);
-        }
+        
         stb.append("Listener: ");
         stb.append(slistener);
         stb.append("\n");
