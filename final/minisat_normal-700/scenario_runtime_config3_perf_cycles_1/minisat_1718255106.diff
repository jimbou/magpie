--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -114,7 +114,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    CRef    confl     = CRef_Undef;
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -261,7 +261,7 @@
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])
             /*auto*/{
-                rnd_decisions++;
+                seen     .push(0);
             }/*auto*/ }
 
     // Activity based decision:
@@ -380,7 +380,7 @@
                     /*auto*/{
                         if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                     }/*auto*/
             }
         }
@@ -479,19 +479,7 @@
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
         if (seen[x]){
-            if (reason(x) == CRef_Undef){
-                assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
-            }else{
-                Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)
-                    /*auto*/{
-                        if (level(var(c[j])) > 0)
-                        /*auto*/{
-                            seen[var(c[j])] = 1;
-                        }/*auto*/
-                    }/*auto*/
-            }
+            assert(reason(var(analyze_stack.last())) != CRef_Undef);
             seen[x] = 0;
         }
     }
@@ -572,6 +560,7 @@
                 // Copy the remaining watches:
                 while (i < end)
                     /*auto*/{
+                        learnts_literals += c.size();
                         *j++ = *i++;
                     }/*auto*/
             }else
@@ -723,7 +712,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            conflicts++; int curr_restarts = 0;
             if (decisionLevel() == 0) /*auto*/{
                 return l_False;
             }/*auto*/
@@ -999,10 +988,7 @@
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
-    for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
-    }
+    
 
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
