--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -195,16 +195,7 @@
         watches.smudge(~c[1]);
     }
 
-    if (c.learnt()) /*auto*/{
-    
-           learnts_literals -= c.size();
-    
-    }/*auto*/
-    else            /*auto*/{
-    
-           clauses_literals -= c.size();
-    
-    }/*auto*/ }
+     }
 
 
 void Solver::removeClause(CRef cr) {
@@ -215,7 +206,7 @@
       vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -308,7 +299,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt())
@@ -353,10 +344,8 @@
     out_learnt.copyTo(analyze_toclear);
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
-        for (i = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                abstract_level |= abstractLevel(var(out_learnt[i]));
-            }/*auto*/ // (maintain an abstraction of levels involved in conflict)
+        qhead = trail.size();
+        vec<Var> map; // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)
             /*auto*/{
@@ -877,7 +866,7 @@
 
     if (verbosity >= 1){
         printf("============================[ Search Statistics ]==============================\n");
-        printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
+        
         printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         printf("===============================================================================\n");
     }
@@ -954,7 +943,7 @@
             fprintf(stderr, "could not open file %s\n", file), exit(1);
         }/*auto*/
     toDimacs(f, assumps);
-    fclose(f);
+    fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
 }
 
 
