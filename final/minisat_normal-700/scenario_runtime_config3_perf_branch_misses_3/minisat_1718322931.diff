--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -114,7 +114,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    rnd_decisions++;
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -213,6 +213,7 @@
     // Don't leave pointers to free'd memory!
     if (locked(c)) /*auto*/{
       vardata[var(c[0])].reason = CRef_Undef;
+      assigns  .push(l_Undef);
     }/*auto*/
     c.mark(1); 
     ca.free(cr);
@@ -353,10 +354,7 @@
     out_learnt.copyTo(analyze_toclear);
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
-        for (i = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                abstract_level |= abstractLevel(var(out_learnt[i]));
-            }/*auto*/ // (maintain an abstraction of levels involved in conflict)
+         // (maintain an abstraction of levels involved in conflict)
 
         for (i = j = 1; i < out_learnt.size(); i++)
             /*auto*/{
