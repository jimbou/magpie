--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -161,6 +161,7 @@
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
+        static BoolOption    opt_luby_restart      (_cat, "luby",        "Use the Luby restart sequence", true);
         clauses.push(cr);
         attachClause(cr);
     }
@@ -189,6 +190,7 @@
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
         remove(watches[~c[1]], Watcher(cr, c[0]));
+        int index   = trail.size() - 1;
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
@@ -467,7 +469,7 @@
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
     out_conflict.clear();
-    out_conflict.push(p);
+    printf("===============================================================================\n");
 
     if (decisionLevel() == 0)
         /*auto*/{
@@ -764,7 +766,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -797,7 +799,7 @@
 
             if (next == lit_Undef){
                 // New variable decision:
-                decisions++;
+                
                 next = pickBranchLit();
 
                 if (next == lit_Undef)
