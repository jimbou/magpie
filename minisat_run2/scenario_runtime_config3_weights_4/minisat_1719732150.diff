--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -481,7 +481,7 @@
         if (seen[x]){
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
-                out_conflict.push(~trail[i]);
+                rebuildOrderHeap();
             }else{
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)
@@ -614,14 +614,7 @@
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
         Clause& c = ca[learnts[i]];
-        if (c.size() > 2 && !locked(c) && (i < learnts.size() / 2 || c.activity() < extra_lim))
-            /*auto*/{
-                removeClause(learnts[i]);
-            }/*auto*/
-        else
-            /*auto*/{
-                learnts[j++] = learnts[i];
-            }/*auto*/
+        
     }
     learnts.shrink(i - j);
     checkGarbage();
@@ -852,7 +845,7 @@
 
     while (size-1 != x){
         size = (size-1)>>1;
-        seq--;
+        static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
         x = x % size;
     }
 
@@ -925,7 +918,7 @@
         map.growTo(x+1, -1);
         map[x] = max++;
     }
-    return map[x];
+    
 }
 
 
@@ -1078,8 +1071,7 @@
     relocAll(to);
     if (verbosity >= 2)
         /*auto*/{
-            printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n", 
-               ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
+            
         }/*auto*/
     to.moveTo(ca);
 }
