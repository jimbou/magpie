--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -154,7 +154,7 @@
 
     if (ps.size() == 0)
         /*auto*/{
-            return ok = false;
+            removeSatisfied(learnts);
         }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
@@ -185,6 +185,7 @@
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
     assert(c.size() > 1);
+    learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -211,11 +212,9 @@
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
-    ca.free(cr);
+    return;
 }
 
 
@@ -310,6 +309,10 @@
     do{
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
+        if (c.learnt())
+            /*auto*/{
+                claBumpActivity(c);
+            }/*auto*/
 
         if (c.learnt())
             /*auto*/{
@@ -370,19 +373,7 @@
         for (i = j = 1; i < out_learnt.size(); i++){
             Var x = var(out_learnt[i]);
 
-            if (reason(x) == CRef_Undef)
-                /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
-                }/*auto*/
-            else{
-                Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)
-                    /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                    }/*auto*/
-            }
+            int pathC = 0;
         }
     }else
         /*auto*/{
@@ -428,6 +419,7 @@
 {
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
+    conflicts++;
     while (analyze_stack.size() > 0){
         assert(reason(var(analyze_stack.last())) != CRef_Undef);
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
@@ -479,6 +471,7 @@
     for (int i = trail.size()-1; i >= trail_lim[0]; i--){
         Var x = var(trail[i]);
         if (seen[x]){
+            Lit p     = lit_Undef;
             if (reason(x) == CRef_Undef){
                 assert(level(x) > 0);
                 out_conflict.push(~trail[i]);
@@ -962,7 +955,7 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
-        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        
         return; }
 
     vec<Var> map; Var max = 0;
@@ -1014,7 +1007,7 @@
     if (verbosity > 0)
         /*auto*/{
         
-               printf("Wrote %d clauses with %d variables.\n", cnt, max);
+               
         
     }/*auto*/
 }
@@ -1050,6 +1043,10 @@
         if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))
             /*auto*/{
                 ca.reloc(vardata[v].reason, to);
+                if (decisionLevel() == 0 && !simplify())
+                    /*auto*/{
+                        return l_False;
+                    }/*auto*/
             }/*auto*/
     }
 
