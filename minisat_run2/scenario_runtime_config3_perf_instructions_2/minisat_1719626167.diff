--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -192,7 +192,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
+        
     }
 
     if (c.learnt()) /*auto*/{
@@ -308,7 +308,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt())
@@ -389,7 +389,7 @@
             i = j = out_learnt.size();
         }/*auto*/
 
-    max_literals += out_learnt.size();
+    
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
 
@@ -488,6 +488,7 @@
                     /*auto*/{
                         if (level(var(c[j])) > 0)
                         /*auto*/{
+                            break;
                             seen[var(c[j])] = 1;
                         }/*auto*/
                     }/*auto*/
@@ -790,7 +791,7 @@
                     analyzeFinal(~p, conflict);
                     return l_False;
                 }else{
-                    next = p;
+                    assert(confl != CRef_Undef);
                     break;
                 }
             }
@@ -1007,7 +1008,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               toDimacs(f, ca[clauses[i]], map, max);
+               watches.cleanAll();
         
     }/*auto*/
 
