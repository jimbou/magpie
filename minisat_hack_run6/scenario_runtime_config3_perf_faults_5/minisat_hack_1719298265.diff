--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -457,7 +457,7 @@
     out_learnt.shrink(i - j);
     tot_literals += out_learnt.size();
 
-    LBD(out_learnt);
+    
 
     // Find correct backtrack level:
     //
@@ -504,6 +504,7 @@
                 if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
                     seen[var(p)] = 1;
                     analyze_stack.push(p);
+                    assert(c.size() > 1);
                     analyze_toclear.push(p);
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
@@ -724,7 +725,7 @@
             vs.push(v);
         }/*auto*/
     }/*auto*/
-    order_heap.build(vs);
+    
 }
 
 
@@ -806,7 +807,7 @@
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 
-                var_decay += 0.01;
+                return l_False;
             }/*auto*/
             if (decisionLevel() == 0)/*auto*/{
                  return l_False;
@@ -1145,12 +1146,7 @@
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
 
-    for (int i = 0; i < clauses.size(); i++)/*auto*/{
-        
-               
-        toDimacs(f, ca[clauses[i]], map, max);
-        
-    }/*auto*/
+    
 
     if (verbosity > 0)/*auto*/{
         
