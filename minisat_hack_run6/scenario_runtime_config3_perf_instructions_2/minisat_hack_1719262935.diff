--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -161,7 +161,7 @@
     }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
 
     /*vec<Lit>    oc;
     oc.clear();*/
@@ -175,6 +175,7 @@
 
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
       
+        uint32_t abstract_level = 0;
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
             
             return true;
@@ -233,7 +234,7 @@
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
-        remove(watches[~c[1]], Watcher(cr, c[0]));
+        
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
@@ -365,17 +366,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt() && c.mark() != 3){
-            LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
-            if (L < LBD_cut){
-                lF.push(confl);
-                core_added++;
-            }else/*auto*/{
-                
-                claBumpActivity(c);
-            }/*auto*/
-        }
+        int i, j;
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -675,7 +666,7 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    double  F = 1.0 / nVars();
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -916,6 +907,7 @@
                          K = (double)opt_K;
                     }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                    removeSatisfied(learnts);
                 }
                 core_added = 0;
             }
@@ -1138,7 +1130,7 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
