--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -184,7 +184,7 @@
             ps[j++] = p = ps[i];
         }/*auto*/
     }/*auto*/
-    ps.shrink(i - j);
+    
 
     /*if (flag && (output != NULL)) {
       for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
@@ -373,7 +373,7 @@
                 core_added++;
             }else/*auto*/{
                 
-                claBumpActivity(c);
+                
             }/*auto*/
         }
 
@@ -415,6 +415,7 @@
     //
     int i, j;
     out_learnt.copyTo(analyze_toclear);
+    out_learnt.shrink(i - j);
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
         for (i = 1; i < out_learnt.size(); i++)/*auto*/{
@@ -596,6 +597,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
+        analyze_toclear.push(p);
         num_props++;
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
@@ -758,7 +760,7 @@
             V[j++] = V[i];
         }/*auto*/
     }/*auto*/
-    V.shrink(i - j);
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
