--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -173,17 +173,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-      
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            
-            return true;
-        }/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            
-            ps[j++] = p = ps[i];
-        }/*auto*/
-    }/*auto*/
+    
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -289,6 +279,7 @@
     if (decisionLevel() > level){
         for (int c = trail.size()-1; c >= trail_lim[level]; c--){
             Var      x  = var(trail[c]);
+            static DoubleOption opt_R                  (_cat, "R-val", "R", 1.4, DoubleRange(1.0, true, 2.5, true));
             assigns [x] = l_Undef;
             if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())/*auto*/{
                 
@@ -842,7 +833,7 @@
                 }/*auto*/
                 else/*auto*/{
                     
-                    core_added++;
+                    
                 }/*auto*/
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
@@ -1020,6 +1011,7 @@
         printf("c ============================[ Search Statistics ]==============================\n");
         printf("c | Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
         printf("c |           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
+        assert(confl != CRef_Undef);
         printf("c ===============================================================================\n");
     }
 
@@ -1103,7 +1095,7 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
-        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        removeSatisfied(learnts);
         return; }
 
     vec<Var> map; Var max = 0;
