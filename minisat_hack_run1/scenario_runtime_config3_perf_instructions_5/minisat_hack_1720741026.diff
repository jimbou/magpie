--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -369,7 +369,7 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                
                 core_added++;
             }else/*auto*/{
                 
@@ -590,7 +590,7 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
-    watches.cleanAll();
+    
 
     while (qhead < trail.size()){
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
@@ -763,10 +763,7 @@
     // Remove satisfied clauses:
     removeSatisfied(learnts);
     removeSatisfied(lF);
-    if (remove_satisfied)/*auto*/{
-              // Can be turned off.
-        removeSatisfied(clauses);
-    }/*auto*/
+    
     checkGarbage();
     rebuildOrderHeap();
 
@@ -797,7 +794,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -813,7 +810,7 @@
             }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
+                int curr_restarts = 0;
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     
                     lS = 0, LQ.clear();
@@ -909,9 +906,7 @@
                         cancelUntil(0);
                         return l_Undef; }
                 }else{
-                    if (adjust > 0)/*auto*/{
-                         adjust--;
-                    }/*auto*/
+                    checkGarbage();
                     if (adjust == 0)/*auto*/{
                          K = (double)opt_K;
                     }/*auto*/
