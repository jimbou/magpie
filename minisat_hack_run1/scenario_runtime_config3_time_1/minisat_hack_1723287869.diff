--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -223,7 +223,7 @@
        learnts_literals += c.size();
     }/*auto*/
     else/*auto*/{
-                  clauses_literals += c.size();
+                  starts++;
     }/*auto*/ }
 
 
@@ -827,6 +827,34 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -842,7 +870,7 @@
                 }/*auto*/
                 else/*auto*/{
                     
-                    core_added++;
+                    
                 }/*auto*/
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
@@ -1042,6 +1070,7 @@
 
     if (status == l_True){
         // Extend & copy model:
+        static const char* _cat = "CORE";
         model.growTo(nVars());
         for (int i = 0; i < nVars(); i++)/*auto*/{
              model[i] = value(i);
@@ -1142,7 +1171,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
@@ -1195,7 +1224,7 @@
 
         if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
             
-            ca.reloc(vardata[v].reason, to);
+            
         }/*auto*/
     }
 
