--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -268,7 +268,7 @@
        vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    CRef    confl     = CRef_Undef;
 }
 
 
@@ -444,7 +444,7 @@
                     
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                 }/*auto*/
             }
         }
@@ -751,13 +751,7 @@
     }/*auto*/
 
     #define V learnts
-    for (i = j = 0; i < V.size(); i++)/*auto*/{
-      
-        if (ca[V[i]].mark() != 3)/*auto*/{
-            
-            V[j++] = V[i];
-        }/*auto*/
-    }/*auto*/
+    
     V.shrink(i - j);
 
     // Remove satisfied clauses:
@@ -797,7 +791,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -882,7 +876,8 @@
                 lS = 0, LQ.clear();
                 progress_estimate = progressEstimate();
                 cancelUntil(0);
-                return l_Undef; }
+                return l_Undef;
+                printf("c ===============================================================================\n"); }
 
             // Simplify the set of problem clauses:
             if (decisionLevel() == 0 && !simplify())/*auto*/{
@@ -1113,10 +1108,7 @@
     int cnt = 0;
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
       
-        if (!satisfied(ca[clauses[i]]))/*auto*/{
-            
-            cnt++;
-        }/*auto*/
+        
     }/*auto*/
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
