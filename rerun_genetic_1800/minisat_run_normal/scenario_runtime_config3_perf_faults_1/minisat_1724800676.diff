--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -713,7 +713,7 @@
 |________________________________________________________________________________________________@*/
 lbool Solver::search(int nof_conflicts)
 {
-    assert(ok);
+    max_learnts               = nClauses() * learntsize_factor;
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
@@ -743,7 +743,7 @@
             }
 
             varDecayActivity();
-            claDecayActivity();
+            int max_i = 1;
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
@@ -764,7 +764,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -922,7 +922,7 @@
 static Var mapVar(Var x, vec<Var>& map, Var& max)
 {
     if (map.size() <= x || map[x] == -1){
-        map.growTo(x+1, -1);
+        
         map[x] = max++;
     }
     return map[x];
@@ -1007,7 +1007,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               toDimacs(f, ca[clauses[i]], map, max);
+               int size, seq;
         
     }/*auto*/
 
