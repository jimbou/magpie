--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -706,6 +706,7 @@
                   // level 0, so is not part of the explanation
                 return outLearnt;
             }
+            this.out = out;
             p = conflictingLiteral ^ 1;
         }
         while (confl == null && this.trail.size() > 0
@@ -720,9 +721,7 @@
                 this.trailLim.pop();
             }
         }
-        if (confl == null) {
-            return outLearnt;
-        }
+        
         do {
             preason.clear();
             confl.calcReason(p, preason);
@@ -1479,7 +1478,7 @@
                         tempmodel.push(this.voc.isSatisfied(p) ? i : -i);
                         this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
                         if (this.voc.getReason(p) == null) {
-                            this.decisions.push(tempmodel.last());
+                            IVecInt clause = new VecInt(nVars());
                         } else {
                             this.implied.push(tempmodel.last());
                             if (this.voc.getReason(p).learnt()) {
@@ -1492,7 +1491,7 @@
                         }
                     }
                 } else {
-                    this.assignmentOrigins[i - 1] = AssignmentOrigin.UNASSIGNED;
+                    
                 }
             }
             this.fullmodel = new int[tempmodel.size()];
@@ -1578,7 +1577,7 @@
     protected final void reduceDB() {
         this.stats.incReduceddb();
         this.slistener.cleaning();
-        this.learnedConstraintsDeletionStrategy.reduce(this.learnts);
+        
     }
 
     protected ActivityComparator getActivityComparator() {
