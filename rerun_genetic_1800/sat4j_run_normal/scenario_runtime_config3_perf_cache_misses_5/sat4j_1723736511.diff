--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -857,10 +857,7 @@
             analyzetoclear.clear();
             conflictToReduce.copyTo(analyzetoclear);
             for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-                if (voc.getReason(conflictToReduce.get(i)) == null
-                        || !analyzeRemovable(conflictToReduce.get(i))) {
-                    conflictToReduce.moveTo(j++, i);
-                }
+                
             }
             conflictToReduce.shrink(i - j);
             stats.incReducedliterals(i - j);
@@ -1825,6 +1822,8 @@
             }
         }
         this.rootLevel = decisionLevel();
+        this.trailLim.clear();
+        this.trailLim.clear();
         // moved initialization here if new literals are added in the
         // assumptions.
         this.learner.init();
@@ -2136,7 +2135,7 @@
         stb.append("Listener: ");
         stb.append(slistener);
         stb.append("\n");
-        stb.append(prefix);
+        
         stb.append("--- End Solver configuration ---"); //$NON-NLS-1$
         return stb.toString();
     }
@@ -2513,9 +2512,7 @@
         }
         Collections.sort(lliterals, trailComparator());
         IVecInt clause = new VecInt(literals.length);
-        for (int d : lliterals) {
-            clause.push(LiteralsUtils.toInternal(d));
-        }
+        
         this.sharedConflict = this.dsfactory.createUnregisteredClause(clause);
         this.sharedConflict.register();
         addConstr(this.sharedConflict);
