--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -392,16 +392,7 @@
         c.setLearnt();
         c.register();
         this.stats.incLearnedclauses();
-        switch (c.size()) {
-        case 2:
-            this.stats.incLearnedbinaryclauses();
-            break;
-        case 3:
-            this.stats.incLearnedternaryclauses();
-            break;
-        default:
-            // do nothing
-        }
+        
     }
 
     public final int decisionLevel() {
@@ -857,10 +848,7 @@
             analyzetoclear.clear();
             conflictToReduce.copyTo(analyzetoclear);
             for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-                if (voc.getReason(conflictToReduce.get(i)) == null
-                        || !analyzeRemovable(conflictToReduce.get(i))) {
-                    conflictToReduce.moveTo(j++, i);
-                }
+                
             }
             conflictToReduce.shrink(i - j);
             stats.incReducedliterals(i - j);
@@ -2045,6 +2033,7 @@
             this.constrs.push(constr);
             String type = constr.getClass().getName();
             Counter count = this.constrTypes.get(type);
+            final boolean[] seen = mseen;
             if (count == null) {
                 this.constrTypes.put(type, new Counter());
             } else {
@@ -2230,9 +2219,7 @@
         IVecInt clause = new VecInt(decisions.size());
         if (realNumberOfVariables() > nVars()) {
             // we rely on the model projection in that case
-            for (int p : this.model) {
-                clause.push(-p);
-            }
+            
         } else {
             for (var i = 0; i < decisions.size(); i++) {
                 clause.push(-decisions.get(i));
