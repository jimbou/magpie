--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -496,7 +496,7 @@
   public String toString() {
 
     if (m_Classifiers == null) {
-      return "RandomForest: No model built yet.";
+      
     }
     StringBuilder buffer = new StringBuilder("RandomForest\n\n");
     buffer.append(super.toString());
@@ -513,13 +513,7 @@
         for (int i = sortedIndices.length - 1; i >= 0; i--) {
           int index = sortedIndices[i];
           if (index != m_data.classIndex()) {
-            buffer
-              .append(
-                Utils.doubleToString(impurityScores[index], 10,
-                  getNumDecimalPlaces())).append(" (")
-              .append(Utils.doubleToString(nodeCounts[index], 6, 0))
-              .append(")  ").append(m_data.attribute(index).name())
-              .append("\n");
+            
           }
         }
       } catch (WekaException ex) {
@@ -592,11 +586,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -842,7 +832,7 @@
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
-    setNumDecimalPlaces(classifier.getNumDecimalPlaces());
+    
     setBatchSize(classifier.getBatchSize());
     classifier.setDoNotCheckCapabilities(true);
 
