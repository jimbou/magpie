--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -158,6 +158,7 @@
     assert(decisionLevel() == 0);
     if (!ok)/*auto*/{
        return false;
+       int max_i = 1;
     }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
@@ -450,6 +451,7 @@
         }
     }else/*auto*/{
       
+        int i, j;
         i = j = out_learnt.size();
     }/*auto*/
 
@@ -827,6 +829,20 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -1142,7 +1158,7 @@
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
-        fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
+        printf("c ===============================================================================\n");
     }
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
