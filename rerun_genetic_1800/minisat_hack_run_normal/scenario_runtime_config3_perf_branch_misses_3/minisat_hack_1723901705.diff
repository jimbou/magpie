--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -158,6 +158,7 @@
     assert(decisionLevel() == 0);
     if (!ok)/*auto*/{
        return false;
+       int max_i = 1;
     }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
@@ -181,6 +182,7 @@
         }/*auto*/
         else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
             
+            qhead = trail.size();
             ps[j++] = p = ps[i];
         }/*auto*/
     }/*auto*/
@@ -202,7 +204,7 @@
         return ok = false;
     }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        starts++;
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -450,6 +452,7 @@
         }
     }else/*auto*/{
       
+        int i, j;
         i = j = out_learnt.size();
     }/*auto*/
 
@@ -827,6 +830,20 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -1103,7 +1120,7 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
-        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        
         return; }
 
     vec<Var> map; Var max = 0;
