--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -237,7 +237,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
+        
     }
 
     if (c.learnt())/*auto*/{
@@ -269,6 +269,7 @@
     }/*auto*/
     c.mark(1); 
     ca.free(cr);
+    assert(reason(var(analyze_stack.last())) != CRef_Undef);
 }
 
 
@@ -691,7 +692,7 @@
                 learnts[j++] = learnts[i]; }
         }/*auto*/
     }
-    learnts.shrink(i - j);
+    
     checkGarbage();
 }
 
@@ -853,7 +854,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -1103,7 +1104,7 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
-        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        
         return; }
 
     vec<Var> map; Var max = 0;
@@ -1193,10 +1194,7 @@
     for (int i = 0; i < trail.size(); i++){
         Var v = var(trail[i]);
 
-        if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
-            
-            ca.reloc(vardata[v].reason, to);
-        }/*auto*/
+        
     }
 
     // All learnt:
@@ -1227,5 +1225,5 @@
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
     }/*auto*/
-    to.moveTo(ca);
-}
+    
+}
