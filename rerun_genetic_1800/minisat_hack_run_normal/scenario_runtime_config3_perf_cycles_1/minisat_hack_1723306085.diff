--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -455,7 +455,7 @@
 
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);
-    tot_literals += out_learnt.size();
+    assert(reason(var(analyze_stack.last())) != CRef_Undef);
 
     LBD(out_learnt);
 
@@ -853,7 +853,7 @@
               fprintf(output, "0\n");
             }*/
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             //if (--learntsize_adjust_cnt == 0){
@@ -1128,7 +1128,7 @@
             
                 if (value(c[j]) != l_False)/*auto*/{
                     
-                    mapVar(var(c[j]), map, max);
+                    
                 }/*auto*/
             }/*auto*/
         }
@@ -1141,6 +1141,7 @@
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
     for (int i = 0; i < assumptions.size(); i++){
+        watches.cleanAll();
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
@@ -1195,7 +1196,7 @@
 
         if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
             
-            ca.reloc(vardata[v].reason, to);
+            static IntOption     opt_restart_first     (_cat, "rfirst",      "The base restart interval", 100, IntRange(1, INT32_MAX));
         }/*auto*/
     }
 
@@ -1227,5 +1228,5 @@
         printf("c |  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
     }/*auto*/
-    to.moveTo(ca);
-}
+    
+}
