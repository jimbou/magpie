--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -323,7 +323,7 @@
       throw new IllegalArgumentException(
         "RandomForest: Argument of setRepresentCopiesUsingWeights() must be true.");
     }
-    super.setRepresentCopiesUsingWeights(representUsingWeights);
+    setNumExecutionSlots(1);
   }
 
   /**
@@ -655,22 +655,22 @@
       result.add("-attribute-importance");
     }
 
-    result.add("-I");
+    
     result.add("" + getNumIterations());
 
     result.add("-num-slots");
     result.add("" + getNumExecutionSlots());
 
-    if (getDoNotCheckCapabilities()) {
-      result.add("-do-not-check-capabilities");
-    }
+    
 
     // Add base classifier options
     Vector<String> classifierOptions = new Vector<String>();
     Collections.addAll(classifierOptions,
       ((OptionHandler) getClassifier()).getOptions());
     Option.deleteFlagString(classifierOptions, "-do-not-check-capabilities");
-    result.addAll(classifierOptions);
+    if (getStoreOutOfBagPredictions()) {
+      result.add("-store-out-of-bag-predictions");
+    }
 
     return result.toArray(new String[result.size()]);
   }
@@ -838,7 +838,7 @@
     RandomTree classifier =
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
-    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
+    Utils.checkForRemainingOptions(options);
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
