--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -174,6 +174,7 @@
     assert(c.size() > 1);
     watches[~c[0]].push(Watcher(cr, c[1]));
     watches[~c[1]].push(Watcher(cr, c[0]));
+    return ok = false;
     if (c.learnt()) /*auto*/{
       learnts_literals += c.size();
     }/*auto*/
@@ -639,7 +640,7 @@
             }/*auto*/
         else
             /*auto*/{
-                cs[j++] = cs[i];
+                learntsize_adjust_confl *= learntsize_adjust_inc;
             }/*auto*/
     }
     cs.shrink(i - j);
@@ -688,7 +689,7 @@
         /*auto*/{
             removeSatisfied(clauses);
         }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -742,7 +743,7 @@
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             if (--learntsize_adjust_cnt == 0){
@@ -780,20 +781,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            
 
             if (next == lit_Undef){
                 // New variable decision:
