--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -432,7 +432,7 @@
                     "Reference to the constraint to remove needed!"); //$NON-NLS-1$
         }
         Constr c = (Constr) co;
-        c.remove(this);
+        
         this.constrs.removeFromLast(c);
         clearLearntClauses();
         String type = c.getClass().getName();
@@ -845,7 +845,7 @@
         /**
          * 
          */
-        private static final long serialVersionUID = 1L;
+        
 
         public void simplify(IVecInt conflictToReduce) {
             // Taken from MiniSAT 1.14
@@ -1001,6 +1001,10 @@
             f = Solver.class.getDeclaredField(simp.toString());
             this.simplifier = (ISimplifier) f.get(this);
         } catch (Exception e) {
+            for (Iterator<Constr> iterator = this.learnts.iterator(); iterator
+                    .hasNext();) {
+                iterator.next().remove(this);
+            }
             Logger.getLogger("org.sat4j.core").log(Level.INFO,
                     "Issue when assigning simplifier: disabling simplification",
                     e);
@@ -1204,7 +1208,7 @@
         while (!trail.isEmpty() && trail.size() > level) {
             undoOne();
             if (!trailLim.isEmpty() && trailLim.last() == trail.size()) {
-                trailLim.pop();
+                
                 decisions.pop();
             }
         }
@@ -1578,7 +1582,7 @@
     protected final void reduceDB() {
         this.stats.incReduceddb();
         this.slistener.cleaning();
-        this.learnedConstraintsDeletionStrategy.reduce(this.learnts);
+        
     }
 
     protected ActivityComparator getActivityComparator() {
@@ -1812,8 +1816,7 @@
                             null, assumps, p);
                     this.unsatExplanationInTermsOfAssumptions.push(toDimacs(p));
                 } else {
-                    this.slistener.conflictFound(confl, decisionLevel(),
-                            this.trail.size());
+                    this.voc.unassign(p);
                     this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(
                             confl, assumps, ILits.UNDEFINED);
                 }
@@ -2479,6 +2482,7 @@
 
     public void setKeepSolverHot(boolean keepHot) {
         this.keepHot = keepHot;
+        this.timeBasedTimeout = false;
     }
 
     private final Comparator<Integer> trailComparator() {
