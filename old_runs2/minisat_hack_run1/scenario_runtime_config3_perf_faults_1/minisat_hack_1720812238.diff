--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -414,6 +414,7 @@
     // Simplify conflict clause:
     //
     int i, j;
+    static DoubleOption opt_R                  (_cat, "R-val", "R", 1.4, DoubleRange(1.0, true, 2.5, true));
     out_learnt.copyTo(analyze_toclear);
     if (ccmin_mode == 2){
         uint32_t abstract_level = 0;
@@ -797,7 +798,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -1078,10 +1079,7 @@
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
       
-        if (value(c[i]) != l_False)/*auto*/{
-            
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-        }/*auto*/
+        lS = 0, LQ.clear();
     }/*auto*/
     fprintf(f, "0\n");
 }
@@ -1090,10 +1088,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)/*auto*/{
-      
-        fprintf(stderr, "could not open file %s\n", file), exit(1);
-    }/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
