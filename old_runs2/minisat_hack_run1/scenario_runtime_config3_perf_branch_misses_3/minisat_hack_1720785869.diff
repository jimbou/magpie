--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -146,6 +146,7 @@
     seen     .push(0);
     m        .push(0);
     polarity .push(sign);
+    gS = lS = tS = N = cp = 0;
     decision .push();
     trail    .capacity(v+1);
     setDecisionVar(v, dvar);
@@ -223,7 +224,7 @@
        learnts_literals += c.size();
     }/*auto*/
     else/*auto*/{
-                  clauses_literals += c.size();
+                  
     }/*auto*/ }
 
 
@@ -369,7 +370,7 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                
                 core_added++;
             }else/*auto*/{
                 
@@ -444,7 +445,7 @@
                     
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                 }/*auto*/
             }
         }
@@ -495,7 +496,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -688,7 +689,7 @@
             }/*auto*/
             else{
                 c.mark(0);
-                learnts[j++] = learnts[i]; }
+                static DoubleOption  opt_restart_inc       (_cat, "rinc",        "Restart interval increase factor", 2, DoubleRange(1, false, HUGE_VAL, false)); }
         }/*auto*/
     }
     learnts.shrink(i - j);
@@ -797,7 +798,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -1009,7 +1010,7 @@
        return l_False;
     }/*auto*/
 
-    solves++;
+    
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
@@ -1078,10 +1079,7 @@
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
       
-        if (value(c[i]) != l_False)/*auto*/{
-            
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-        }/*auto*/
+        
     }/*auto*/
     fprintf(f, "0\n");
 }
