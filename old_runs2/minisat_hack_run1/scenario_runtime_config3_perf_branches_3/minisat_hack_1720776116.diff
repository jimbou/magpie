--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -156,9 +156,7 @@
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
-    if (!ok)/*auto*/{
-       return false;
-    }/*auto*/
+    
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
@@ -204,6 +202,7 @@
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
         return ok = (propagate() == CRef_Undef);
+        newDecisionLevel();
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -463,6 +462,7 @@
     //
     if (out_learnt.size() == 1)/*auto*/{
       
+        cancelUntil(0);
         out_btlevel = 0;
     }/*auto*/
     else{
@@ -767,7 +767,7 @@
               // Can be turned off.
         removeSatisfied(clauses);
     }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -797,7 +797,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -806,7 +806,7 @@
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 
-                var_decay += 0.01;
+                
             }/*auto*/
             if (decisionLevel() == 0)/*auto*/{
                  return l_False;
@@ -1116,6 +1116,16 @@
         if (!satisfied(ca[clauses[i]]))/*auto*/{
             
             cnt++;
+            if (verbosity >= 1)/*auto*/{
+                
+                printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                       (int)conflicts, 
+                       (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                       (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                       starts, conflicts / starts,
+                       luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                       (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+            }/*auto*/
         }/*auto*/
     }/*auto*/
         
@@ -1197,6 +1207,7 @@
             
             ca.reloc(vardata[v].reason, to);
         }/*auto*/
+        checkGarbage();
     }
 
     // All learnt:
