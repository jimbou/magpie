--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -370,7 +370,7 @@
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
                 lF.push(confl);
-                core_added++;
+                
             }else/*auto*/{
                 
                 claBumpActivity(c);
@@ -467,6 +467,7 @@
     }/*auto*/
     else{
         int max_i = 1;
+        out_btlevel = 0;
         // Find the first literal assigned at the next-highest level:
         for (int i = 2; i < out_learnt.size(); i++)/*auto*/{
             
@@ -506,6 +507,7 @@
                     analyze_stack.push(p);
                     analyze_toclear.push(p);
                 }else{
+                    Clause& c = ca[reason(var(analyze_stack.last()))];
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
                         
                         seen[var(analyze_toclear[j])] = 0;
@@ -797,7 +799,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -827,6 +829,7 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                int beg = i == 0 ? 0 : trail_lim[i - 1];
             }
 
             if (learnt_clause.size() == 1){
@@ -1116,6 +1119,16 @@
         if (!satisfied(ca[clauses[i]]))/*auto*/{
             
             cnt++;
+            if (verbosity >= 1)/*auto*/{
+                
+                printf("c | %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% | %d %d | %d %.1f (%.1f) %.1f (%.1f) %d (%d-%d) %d %.2f\n", 
+                       (int)conflicts, 
+                       (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
+                       (int)lF.size()/*max_learnts*/, nLearnts(), (double)learnts_literals/(lF.size()+nLearnts()), progressEstimate()*100,
+                       starts, conflicts / starts,
+                       luby_restart, K, (double)opt_K, R, (double)opt_R, LBD_cut, (int32_t)opt_lbd_cut, (int32_t)opt_lbd_cut_max,
+                       (int32_t)opt_cp_increase, (double)opt_core_tolerance);
+            }/*auto*/
         }/*auto*/
     }/*auto*/
         
