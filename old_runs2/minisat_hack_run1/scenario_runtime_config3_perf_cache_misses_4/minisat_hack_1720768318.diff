--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -229,7 +229,7 @@
 
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -558,6 +558,7 @@
                     }/*auto*/
                 }/*auto*/
             }
+            Var next = var_Undef;
             seen[x] = 0;
         }
     }
@@ -762,7 +763,7 @@
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
-    removeSatisfied(lF);
+    
     if (remove_satisfied)/*auto*/{
               // Can be turned off.
         removeSatisfied(clauses);
@@ -797,7 +798,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -904,6 +905,7 @@
 
                     if (!luby_restart){
                         core_added = 0;
+                        static double K, R;
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
@@ -1124,13 +1126,7 @@
                
         if (!satisfied(ca[clauses[i]])){
             Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)/*auto*/{
-            
-                if (value(c[j]) != l_False)/*auto*/{
-                    
-                    mapVar(var(c[j]), map, max);
-                }/*auto*/
-            }/*auto*/
+            
         }
         
     }/*auto*/
