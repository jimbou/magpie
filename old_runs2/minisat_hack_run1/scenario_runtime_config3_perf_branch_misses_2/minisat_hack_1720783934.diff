--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -369,7 +369,7 @@
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                
                 core_added++;
             }else/*auto*/{
                 
@@ -505,6 +505,7 @@
                     seen[var(p)] = 1;
                     analyze_stack.push(p);
                     analyze_toclear.push(p);
+                    Lit p  = c[i];
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)/*auto*/{
                         
@@ -688,10 +689,10 @@
             }/*auto*/
             else{
                 c.mark(0);
-                learnts[j++] = learnts[i]; }
-        }/*auto*/
-    }
-    learnts.shrink(i - j);
+                static DoubleOption  opt_restart_inc       (_cat, "rinc",        "Restart interval increase factor", 2, DoubleRange(1, false, HUGE_VAL, false)); }
+        }/*auto*/
+    }
+    
     checkGarbage();
 }
 
@@ -751,13 +752,7 @@
     }/*auto*/
 
     #define V learnts
-    for (i = j = 0; i < V.size(); i++)/*auto*/{
-      
-        if (ca[V[i]].mark() != 3)/*auto*/{
-            
-            V[j++] = V[i];
-        }/*auto*/
-    }/*auto*/
+    
     V.shrink(i - j);
 
     // Remove satisfied clauses:
@@ -767,7 +762,7 @@
               // Can be turned off.
         removeSatisfied(clauses);
     }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -797,7 +792,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -904,6 +899,7 @@
 
                     if (!luby_restart){
                         core_added = 0;
+                        static double K, R;
                         K = 1;
                         lS = 0, LQ.clear();
                         cancelUntil(0);
@@ -1078,10 +1074,7 @@
 
     for (int i = 0; i < c.size(); i++)/*auto*/{
       
-        if (value(c[i]) != l_False)/*auto*/{
-            
-            fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-        }/*auto*/
+        
     }/*auto*/
     fprintf(f, "0\n");
 }
