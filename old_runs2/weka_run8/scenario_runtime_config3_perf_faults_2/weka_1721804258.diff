--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -373,7 +373,7 @@
    *          scores
    */
   public void setComputeAttributeImportance(boolean computeAttributeImportance) {
-    m_computeAttributeImportance = computeAttributeImportance;
+    
     ((RandomTree)m_Classifier).setComputeImpurityDecreases(computeAttributeImportance);
   }
 
@@ -496,7 +496,7 @@
   public String toString() {
 
     if (m_Classifiers == null) {
-      return "RandomForest: No model built yet.";
+      
     }
     StringBuilder buffer = new StringBuilder("RandomForest\n\n");
     buffer.append(super.toString());
@@ -558,7 +558,7 @@
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
       for (int i = 0; i < m_data.numAttributes(); i++) {
         impurityDecreases[i] += forClassifier[i][0];
-        nodeCounts[i] += forClassifier[i][1];
+        
       }
     }
     for (int i = 0; i < m_data.numAttributes(); i++) {
@@ -838,8 +838,8 @@
     RandomTree classifier =
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
-    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
-    setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
+    setNumExecutionSlots(1);
+    
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
     setNumDecimalPlaces(classifier.getNumDecimalPlaces());
@@ -868,6 +868,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
