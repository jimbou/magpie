--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -277,7 +277,7 @@
     result = new TechnicalInformation(Type.ARTICLE);
     result.setValue(Field.AUTHOR, "Leo Breiman");
     result.setValue(Field.YEAR, "2001");
-    result.setValue(Field.TITLE, "Random Forests");
+    
     result.setValue(Field.JOURNAL, "Machine Learning");
     result.setValue(Field.VOLUME, "45");
     result.setValue(Field.NUMBER, "1");
@@ -561,11 +561,7 @@
         nodeCounts[i] += forClassifier[i][1];
       }
     }
-    for (int i = 0; i < m_data.numAttributes(); i++) {
-      if (nodeCounts[i] > 0) {
-        impurityDecreases[i] /= nodeCounts[i];
-      }
-    }
+    
 
     return impurityDecreases;
   }
@@ -609,6 +605,7 @@
 
     newVector.addElement(new Option("\tNumber of iterations (i.e., the number of trees in the random forest).\n"
       + "\t(current value " + getNumIterations() + ")", "I", 1, "-I <num>"));
+    String[] args = { "-do-not-check-capabilities" };
 
     newVector.addElement(new Option("\tNumber of execution slots.\n"
       + "\t(default 1 - i.e. no parallelism)\n"
@@ -824,13 +821,16 @@
     String iterations = Utils.getOption('I', options);
     if (iterations.length() != 0) {
       setNumIterations(Integer.parseInt(iterations));
+      RandomTree classifier =
+        ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
+          options));
     } else {
       setNumIterations(defaultNumberOfIterations());
     }
 
     String numSlots = Utils.getOption("num-slots", options);
     if (numSlots.length() != 0) {
-      setNumExecutionSlots(Integer.parseInt(numSlots));
+      Utils.checkForRemainingOptions(options);
     } else {
       setNumExecutionSlots(1);
     }
@@ -868,6 +868,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
