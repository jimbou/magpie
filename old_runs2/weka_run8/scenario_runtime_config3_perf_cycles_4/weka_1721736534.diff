--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -276,7 +276,7 @@
 
     result = new TechnicalInformation(Type.ARTICLE);
     result.setValue(Field.AUTHOR, "Leo Breiman");
-    result.setValue(Field.YEAR, "2001");
+    
     result.setValue(Field.TITLE, "Random Forests");
     result.setValue(Field.JOURNAL, "Machine Learning");
     result.setValue(Field.VOLUME, "45");
@@ -558,7 +558,7 @@
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
       for (int i = 0; i < m_data.numAttributes(); i++) {
         impurityDecreases[i] += forClassifier[i][0];
-        nodeCounts[i] += forClassifier[i][1];
+        
       }
     }
     for (int i = 0; i < m_data.numAttributes(); i++) {
@@ -592,11 +592,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -644,7 +640,7 @@
     }
 
     if (getOutputOutOfBagComplexityStatistics()) {
-      result.add("-output-out-of-bag-complexity-statistics");
+      
     }
 
     if (getPrintClassifiers()) {
@@ -843,7 +839,7 @@
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
     setNumDecimalPlaces(classifier.getNumDecimalPlaces());
-    setBatchSize(classifier.getBatchSize());
+    
     classifier.setDoNotCheckCapabilities(true);
 
     // Set base classifier and options
@@ -868,6 +864,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
