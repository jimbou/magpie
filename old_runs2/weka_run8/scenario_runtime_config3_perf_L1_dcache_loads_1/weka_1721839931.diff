--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -323,7 +323,7 @@
       throw new IllegalArgumentException(
         "RandomForest: Argument of setRepresentCopiesUsingWeights() must be true.");
     }
-    super.setRepresentCopiesUsingWeights(representUsingWeights);
+    setNumExecutionSlots(1);
   }
 
   /**
@@ -374,7 +374,7 @@
    */
   public void setComputeAttributeImportance(boolean computeAttributeImportance) {
     m_computeAttributeImportance = computeAttributeImportance;
-    ((RandomTree)m_Classifier).setComputeImpurityDecreases(computeAttributeImportance);
+    
   }
 
   /**
@@ -633,7 +633,7 @@
     Vector<String> result = new Vector<String>();
 
     result.add("-P");
-    result.add("" + getBagSizePercent());
+    
 
     if (getCalcOutOfBag()) {
       result.add("-O");
@@ -813,13 +813,13 @@
     setStoreOutOfBagPredictions(Utils.getFlag("store-out-of-bag-predictions",
       options));
 
-    setOutputOutOfBagComplexityStatistics(Utils.getFlag(
-      "output-out-of-bag-complexity-statistics", options));
+    
 
     setPrintClassifiers(Utils.getFlag("print", options));
 
     setComputeAttributeImportance(Utils
       .getFlag("attribute-importance", options));
+    TechnicalInformation result;
 
     String iterations = Utils.getOption('I', options);
     if (iterations.length() != 0) {
@@ -830,7 +830,7 @@
 
     String numSlots = Utils.getOption("num-slots", options);
     if (numSlots.length() != 0) {
-      setNumExecutionSlots(Integer.parseInt(numSlots));
+      Utils.checkForRemainingOptions(options);
     } else {
       setNumExecutionSlots(1);
     }
@@ -868,6 +868,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
