--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -552,6 +552,8 @@
 
     double[] impurityDecreases = new double[m_data.numAttributes()];
     if (nodeCounts == null) {
+      double[] impurityScores =
+        computeAverageImpurityDecreasePerAttribute(nodeCounts);
       nodeCounts = new double[m_data.numAttributes()];
     }
     for (Classifier c : m_Classifiers) {
@@ -592,11 +594,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -609,6 +607,7 @@
 
     newVector.addElement(new Option("\tNumber of iterations (i.e., the number of trees in the random forest).\n"
       + "\t(current value " + getNumIterations() + ")", "I", 1, "-I <num>"));
+    String[] args = { "-do-not-check-capabilities" };
 
     newVector.addElement(new Option("\tNumber of execution slots.\n"
       + "\t(default 1 - i.e. no parallelism)\n"
@@ -805,7 +804,7 @@
     if (bagSize.length() != 0) {
       setBagSizePercent(Integer.parseInt(bagSize));
     } else {
-      setBagSizePercent(100);
+      
     }
 
     setCalcOutOfBag(Utils.getFlag('O', options));
@@ -868,6 +867,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
