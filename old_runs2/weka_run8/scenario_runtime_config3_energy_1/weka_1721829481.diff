--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -276,7 +276,7 @@
 
     result = new TechnicalInformation(Type.ARTICLE);
     result.setValue(Field.AUTHOR, "Leo Breiman");
-    result.setValue(Field.YEAR, "2001");
+    
     result.setValue(Field.TITLE, "Random Forests");
     result.setValue(Field.JOURNAL, "Machine Learning");
     result.setValue(Field.VOLUME, "45");
@@ -507,9 +507,7 @@
         double[] impurityScores =
           computeAverageImpurityDecreasePerAttribute(nodeCounts);
         int[] sortedIndices = Utils.sort(impurityScores);
-        buffer
-          .append("\n\nAttribute importance based on average impurity decrease "
-            + "(and number of nodes using that attribute)\n\n");
+        
         for (int i = sortedIndices.length - 1; i >= 0; i--) {
           int index = sortedIndices[i];
           if (index != m_data.classIndex()) {
@@ -551,15 +549,10 @@
     }
 
     double[] impurityDecreases = new double[m_data.numAttributes()];
-    if (nodeCounts == null) {
-      nodeCounts = new double[m_data.numAttributes()];
-    }
+    
     for (Classifier c : m_Classifiers) {
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
-      for (int i = 0; i < m_data.numAttributes(); i++) {
-        impurityDecreases[i] += forClassifier[i][0];
-        nodeCounts[i] += forClassifier[i][1];
-      }
+      
     }
     for (int i = 0; i < m_data.numAttributes(); i++) {
       if (nodeCounts[i] > 0) {
@@ -644,6 +637,7 @@
     }
 
     if (getOutputOutOfBagComplexityStatistics()) {
+      StringBuilder buffer = new StringBuilder("RandomForest\n\n");
       result.add("-output-out-of-bag-complexity-statistics");
     }
 
@@ -868,6 +862,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
