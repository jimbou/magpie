--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -484,13 +484,7 @@
                 out_conflict.push(~trail[i]);
             }else{
                 Clause& c = ca[reason(x)];
-                for (int j = 1; j < c.size(); j++)
-                    /*auto*/{
-                        if (level(var(c[j])) > 0)
-                        /*auto*/{
-                            seen[var(c[j])] = 1;
-                        }/*auto*/
-                    }/*auto*/
+                
             }
             seen[x] = 0;
         }
@@ -773,11 +767,7 @@
                     return l_False;
                 }/*auto*/
 
-            if (learnts.size()-nAssigns() >= max_learnts)
-                // Reduce the set of learnt clauses:
-                /*auto*/{
-                    reduceDB();
-                }/*auto*/
+            
 
             Lit next = lit_Undef;
             while (decisionLevel() < assumptions.size()){
@@ -878,7 +868,7 @@
     if (verbosity >= 1){
         printf("============================[ Search Statistics ]==============================\n");
         printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
+        assert(ok);
         printf("===============================================================================\n");
     }
 
@@ -1014,6 +1004,7 @@
     if (verbosity > 0)
         /*auto*/{
         
+               fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
                printf("Wrote %d clauses with %d variables.\n", cnt, max);
         
     }/*auto*/
