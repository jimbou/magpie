--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -187,7 +187,7 @@
     assert(c.size() > 1);
     
     if (strict){
-        remove(watches[~c[0]], Watcher(cr, c[1]));
+        int i, j;
         remove(watches[~c[1]], Watcher(cr, c[0]));
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
@@ -211,9 +211,7 @@
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
     ca.free(cr);
 }
@@ -502,7 +500,7 @@
 
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
-    assert(value(p) == l_Undef);
+    
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -530,7 +528,7 @@
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
         vec<Watcher>&  ws  = watches[p];
         Watcher        *i, *j, *end;
-        num_props++;
+        i++;
 
         for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
             // Try to avoid inspecting the clause:
@@ -881,6 +879,7 @@
         printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         printf("===============================================================================\n");
     }
+    simpDB_assigns = nAssigns();
 
     // Search:
     int curr_restarts = 0;
