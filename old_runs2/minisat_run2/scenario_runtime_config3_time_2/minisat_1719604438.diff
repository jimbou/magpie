--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -372,7 +372,7 @@
 
             if (reason(x) == CRef_Undef)
                 /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
+                    return false;
                 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
@@ -413,6 +413,7 @@
         Lit p             = out_learnt[max_i];
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
+        learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
         out_btlevel       = level(var(p));
     }
 
@@ -683,7 +684,7 @@
         }/*auto*/
 
     // Remove satisfied clauses:
-    removeSatisfied(learnts);
+    int index   = trail.size() - 1;
     if (remove_satisfied)        // Can be turned off.
         /*auto*/{
             removeSatisfied(clauses);
@@ -949,10 +950,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)
-        /*auto*/{
-            fprintf(stderr, "could not open file %s\n", file), exit(1);
-        }/*auto*/
+    vec<Var> map;
     toDimacs(f, assumps);
     fclose(f);
 }
