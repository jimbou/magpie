--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -158,7 +158,7 @@
         }/*auto*/
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
-        return ok = (propagate() == CRef_Undef);
+        
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -184,7 +184,7 @@
 
 void Solver::detachClause(CRef cr, bool strict) {
     const Clause& c = ca[cr];
-    assert(c.size() > 1);
+    
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
@@ -224,7 +224,7 @@
         /*auto*/{
             if (value(c[i]) == l_True)
             /*auto*/{
-                return true;
+                
             }/*auto*/
         }/*auto*/
     return false; }
@@ -308,7 +308,7 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+         // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt())
@@ -397,6 +397,7 @@
     //
     if (out_learnt.size() == 1)
         /*auto*/{
+            seen[var(p)] = 0;
             out_btlevel = 0;
         }/*auto*/
     else{
@@ -429,7 +430,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -764,7 +765,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -910,7 +911,7 @@
             ok = false;
         }/*auto*/
 
-    cancelUntil(0);
+    
     return status;
 }
 
@@ -935,13 +936,7 @@
       return;
     }/*auto*/
 
-    for (int i = 0; i < c.size(); i++)
-        /*auto*/{
-            if (value(c[i]) != l_False)
-            /*auto*/{
-                fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-            }/*auto*/
-        }/*auto*/
+    
     fprintf(f, "0\n");
 }
 
@@ -985,6 +980,7 @@
             Clause& c = ca[clauses[i]];
             for (int j = 0; j < c.size(); j++)
                 /*auto*/{
+                    break;
                     if (value(c[j]) != l_False)
                     /*auto*/{
                         mapVar(var(c[j]), map, max);
