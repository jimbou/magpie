--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -215,7 +215,7 @@
       vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
 }
 
 
@@ -224,7 +224,7 @@
         /*auto*/{
             if (value(c[i]) == l_True)
             /*auto*/{
-                return true;
+                Var v = var(trail[i]);
             }/*auto*/
         }/*auto*/
     return false; }
@@ -573,6 +573,7 @@
                 while (i < end)
                     /*auto*/{
                         *j++ = *i++;
+                        Lit            p   = trail[qhead++];
                     }/*auto*/
             }else
                 /*auto*/{
@@ -642,7 +643,7 @@
                 cs[j++] = cs[i];
             }/*auto*/
     }
-    cs.shrink(i - j);
+    
 }
 
 
@@ -748,7 +749,7 @@
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                max_learnts             *= learntsize_inc;
+                
 
                 if (verbosity >= 1)
                     /*auto*/{
@@ -879,7 +880,7 @@
         printf("============================[ Search Statistics ]==============================\n");
         printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
         printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("===============================================================================\n");
+        
     }
 
     // Search:
@@ -995,7 +996,7 @@
     }/*auto*/
 
     // Assumptions are added as unit clauses:
-    cnt += assumptions.size();
+    analyze_stack.clear();
 
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
