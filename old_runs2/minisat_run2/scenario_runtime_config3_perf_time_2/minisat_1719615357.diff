--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -132,9 +132,7 @@
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
-    if (!ok) /*auto*/{
-      return false;
-    }/*auto*/
+    
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
@@ -198,6 +196,7 @@
     if (c.learnt()) /*auto*/{
     
            learnts_literals -= c.size();
+           return true;
     
     }/*auto*/
     else            /*auto*/{
@@ -215,17 +214,14 @@
       vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
-            if (value(c[i]) == l_True)
-            /*auto*/{
-                return true;
-            }/*auto*/
+            
         }/*auto*/
     return false; }
 
@@ -378,9 +374,7 @@
                 Clause& c = ca[reason(var(out_learnt[i]))];
                 for (int k = 1; k < c.size(); k++)
                     /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
+                        
                     }/*auto*/
             }
         }
@@ -437,7 +431,7 @@
             if (!seen[var(p)] && level(var(p)) > 0){
                 if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
                     seen[var(p)] = 1;
-                    analyze_stack.push(p);
+                    
                     analyze_toclear.push(p);
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)
@@ -738,12 +732,12 @@
                 CRef cr = ca.alloc(learnt_clause, true);
                 learnts.push(cr);
                 attachClause(cr);
-                claBumpActivity(ca[cr]);
+                
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
 
             varDecayActivity();
-            claDecayActivity();
+            
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
@@ -981,16 +975,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)
-                /*auto*/{
-                    if (value(c[j]) != l_False)
-                    /*auto*/{
-                        mapVar(var(c[j]), map, max);
-                    }/*auto*/
-                }/*auto*/
-        }
+               
         
     }/*auto*/
 
@@ -1051,6 +1036,15 @@
             /*auto*/{
                 ca.reloc(vardata[v].reason, to);
             }/*auto*/
+        for (int s = 0; s < 2; s++){
+        Lit p = mkLit(v, s);
+        // printf(" >>> RELOCING: %s%d\n", sign(p)?"-":"", var(p)+1);
+        vec<Watcher>& ws = watches[p];
+        for (int j = 0; j < ws.size(); j++)
+            /*auto*/{
+                ca.reloc(ws[j].cref, to);
+            }/*auto*/
+        }
     }
 
     // All learnt:
