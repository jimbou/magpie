--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -351,43 +351,7 @@
     //
     int i, j;
     out_learnt.copyTo(analyze_toclear);
-    if (ccmin_mode == 2){
-        uint32_t abstract_level = 0;
-        for (i = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                abstract_level |= abstractLevel(var(out_learnt[i]));
-            }/*auto*/ // (maintain an abstraction of levels involved in conflict)
-
-        for (i = j = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
-                /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
-                }/*auto*/
-            }/*auto*/
-        
-    }else if (ccmin_mode == 1){
-        for (i = j = 1; i < out_learnt.size(); i++){
-            Var x = var(out_learnt[i]);
-
-            if (reason(x) == CRef_Undef)
-                /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
-                }/*auto*/
-            else{
-                Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)
-                    /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                    }/*auto*/
-            }
-        }
-    }else
-        /*auto*/{
-            i = j = out_learnt.size();
-        }/*auto*/
+    
 
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);
@@ -426,7 +390,7 @@
 // visiting literals at levels that cannot be removed later.
 bool Solver::litRedundant(Lit p, uint32_t abstract_levels)
 {
-    analyze_stack.clear(); analyze_stack.push(p);
+    analyze_stack.clear(); 
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
         assert(reason(var(analyze_stack.last())) != CRef_Undef);
@@ -856,7 +820,7 @@
         x = x % size;
     }
 
-    return pow(y, seq);
+    
 }
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
@@ -949,10 +913,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)
-        /*auto*/{
-            fprintf(stderr, "could not open file %s\n", file), exit(1);
-        }/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -963,7 +924,7 @@
     // Handle case when solver is in contradictory state:
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
-        return; }
+         }
 
     vec<Var> map; Var max = 0;
 
@@ -1037,6 +998,7 @@
             vec<Watcher>& ws = watches[p];
             for (int j = 0; j < ws.size(); j++)
                 /*auto*/{
+                    int         conflictC = 0;
                     ca.reloc(ws[j].cref, to);
                 }/*auto*/
         }
