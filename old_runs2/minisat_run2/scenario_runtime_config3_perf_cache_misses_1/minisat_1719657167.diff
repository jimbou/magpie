--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -723,7 +723,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            conflicts++; 
             if (decisionLevel() == 0) /*auto*/{
                 return l_False;
             }/*auto*/
@@ -821,6 +821,7 @@
     double  F = 1.0 / nVars();
 
     for (int i = 0; i <= decisionLevel(); i++){
+        watches.cleanAll();
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
         progress += pow(F, i) * (end - beg);
@@ -856,7 +857,7 @@
         x = x % size;
     }
 
-    return pow(y, seq);
+    
 }
 
 // NOTE: assumptions passed in member-variable 'assumptions'.
@@ -881,6 +882,7 @@
         printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         printf("===============================================================================\n");
     }
+    rebuildOrderHeap();
 
     // Search:
     int curr_restarts = 0;
@@ -1037,6 +1039,7 @@
             vec<Watcher>& ws = watches[p];
             for (int j = 0; j < ws.size(); j++)
                 /*auto*/{
+                    learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                     ca.reloc(ws[j].cref, to);
                 }/*auto*/
         }
@@ -1078,8 +1081,7 @@
     relocAll(to);
     if (verbosity >= 2)
         /*auto*/{
-            printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n", 
-               ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
+            
         }/*auto*/
     to.moveTo(ca);
 }
