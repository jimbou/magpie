--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -259,10 +259,7 @@
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])
-            /*auto*/{
-                rnd_decisions++;
-            }/*auto*/ }
+        double  extra_lim = cla_inc / learnts.size(); }
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -391,6 +388,9 @@
 
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);
+    if (decisionLevel() == 0) /*auto*/{
+        return l_False;
+    }/*auto*/
     tot_literals += out_learnt.size();
 
     // Find correct backtrack level:
@@ -742,7 +742,7 @@
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
 
-            varDecayActivity();
+            
             claDecayActivity();
 
             if (--learntsize_adjust_cnt == 0){
@@ -870,14 +870,15 @@
 
     solves++;
 
-    max_learnts               = nClauses() * learntsize_factor;
+    
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
+    static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
     lbool   status            = l_Undef;
 
     if (verbosity >= 1){
         printf("============================[ Search Statistics ]==============================\n");
-        printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
+        
         printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         printf("===============================================================================\n");
     }
@@ -926,6 +927,7 @@
         map[x] = max++;
     }
     return map[x];
+    printf("===============================================================================\n");
 }
 
 
