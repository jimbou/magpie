--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -723,7 +723,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            conflicts++; 
             if (decisionLevel() == 0) /*auto*/{
                 return l_False;
             }/*auto*/
@@ -770,7 +770,7 @@
             // Simplify the set of problem clauses:
             if (decisionLevel() == 0 && !simplify())
                 /*auto*/{
-                    return l_False;
+                    
                 }/*auto*/
 
             if (learnts.size()-nAssigns() >= max_learnts)
@@ -966,6 +966,7 @@
         return; }
 
     vec<Var> map; Var max = 0;
+    progress_estimate = progressEstimate();
 
     // Cannot use removeClauses here because it is not safe
     // to deallocate them at this point. Could be improved.
@@ -987,7 +988,7 @@
                 /*auto*/{
                     if (value(c[j]) != l_False)
                     /*auto*/{
-                        mapVar(var(c[j]), map, max);
+                        
                     }/*auto*/
                 }/*auto*/
         }
@@ -997,7 +998,7 @@
     // Assumptions are added as unit clauses:
     cnt += assumptions.size();
 
-    fprintf(f, "p cnf %d %d\n", max, cnt);
+    
 
     for (int i = 0; i < assumptions.size(); i++){
         assert(value(assumptions[i]) != l_False);
@@ -1076,10 +1077,6 @@
     ClauseAllocator to(ca.size() - ca.wasted()); 
 
     relocAll(to);
-    if (verbosity >= 2)
-        /*auto*/{
-            printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n", 
-               ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
-        }/*auto*/
+    
     to.moveTo(ca);
 }
