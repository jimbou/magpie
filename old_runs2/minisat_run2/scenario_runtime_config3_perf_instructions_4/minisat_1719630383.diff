--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -115,7 +115,7 @@
 {
     int v = nVars();
     watches  .init(mkLit(v, false));
-    watches  .init(mkLit(v, true ));
+    
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
     //activity .push(0);
@@ -311,10 +311,7 @@
         assert(confl != CRef_Undef); // (otherwise should be UIP)
         Clause& c = ca[confl];
 
-        if (c.learnt())
-            /*auto*/{
-                claBumpActivity(c);
-            }/*auto*/
+        
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
@@ -376,12 +373,7 @@
                 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)
-                    /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                    }/*auto*/
+                
             }
         }
     }else
@@ -437,7 +429,7 @@
             if (!seen[var(p)] && level(var(p)) > 0){
                 if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
                     seen[var(p)] = 1;
-                    analyze_stack.push(p);
+                    vec<Watcher>& ws = watches[p];
                     analyze_toclear.push(p);
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)
@@ -583,7 +575,7 @@
         }
         ws.shrink(i - j);
     }
-    propagations += num_props;
+    
     simpDB_props -= num_props;
 
     return confl;
@@ -633,14 +625,7 @@
     int i, j;
     for (i = j = 0; i < cs.size(); i++){
         Clause& c = ca[cs[i]];
-        if (satisfied(c))
-            /*auto*/{
-                removeClause(cs[i]);
-            }/*auto*/
-        else
-            /*auto*/{
-                cs[j++] = cs[i];
-            }/*auto*/
+        
     }
     cs.shrink(i - j);
 }
@@ -750,13 +735,7 @@
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                
             }
 
         }else{
@@ -780,20 +759,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            
 
             if (next == lit_Undef){
                 // New variable decision:
@@ -872,7 +838,7 @@
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
-    learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
+    
     lbool   status            = l_Undef;
 
     if (verbosity >= 1){
@@ -910,7 +876,7 @@
             ok = false;
         }/*auto*/
 
-    cancelUntil(0);
+    removeSatisfied(learnts);
     return status;
 }
 
@@ -949,10 +915,7 @@
 void Solver::toDimacs(const char *file, const vec<Lit>& assumps)
 {
     FILE* f = fopen(file, "wr");
-    if (f == NULL)
-        /*auto*/{
-            fprintf(stderr, "could not open file %s\n", file), exit(1);
-        }/*auto*/
+    
     toDimacs(f, assumps);
     fclose(f);
 }
@@ -961,6 +924,7 @@
 void Solver::toDimacs(FILE* f, const vec<Lit>& assumps)
 {
     // Handle case when solver is in contradictory state:
+    max_learnts               = nClauses() * learntsize_factor;
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
         return; }
