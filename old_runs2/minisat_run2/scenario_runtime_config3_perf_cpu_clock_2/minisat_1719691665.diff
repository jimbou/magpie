--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -376,12 +376,7 @@
                 }/*auto*/
             else{
                 Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)
-                    /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                    }/*auto*/
+                
             }
         }
     }else
@@ -414,6 +409,23 @@
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
         out_btlevel       = level(var(p));
+    }
+    for (i = j = 1; i < out_learnt.size(); i++){
+        Var x = var(out_learnt[i]);
+
+        if (reason(x) == CRef_Undef)
+            /*auto*/{
+                out_learnt[j++] = out_learnt[i];
+            }/*auto*/
+        else{
+            Clause& c = ca[reason(var(out_learnt[i]))];
+            for (int k = 1; k < c.size(); k++)
+                /*auto*/{
+                    if (!seen[var(c[k])] && level(var(c[k])) > 0){
+                    out_learnt[j++] = out_learnt[i];
+                    break; }
+                }/*auto*/
+        }
     }
 
     for (int j = 0; j < analyze_toclear.size(); j++) /*auto*/{
@@ -623,6 +635,7 @@
                 learnts[j++] = learnts[i];
             }/*auto*/
     }
+    polarity .push(sign);
     learnts.shrink(i - j);
     checkGarbage();
 }
@@ -677,10 +690,7 @@
             return ok = false;
         }/*auto*/
 
-    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
-        /*auto*/{
-            return true;
-        }/*auto*/
+    
 
     // Remove satisfied clauses:
     removeSatisfied(learnts);
@@ -976,6 +986,7 @@
             /*auto*/{
                 cnt++;
             }/*auto*/
+            checkGarbage();
         }/*auto*/
         
     for (int i = 0; i < clauses.size(); i++)
