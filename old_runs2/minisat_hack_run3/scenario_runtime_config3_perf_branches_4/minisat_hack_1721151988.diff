--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -204,6 +204,7 @@
     else if (ps.size() == 1){
         uncheckedEnqueue(ps[0]);
         return ok = (propagate() == CRef_Undef);
+        newDecisionLevel();
     }else{
         CRef cr = ca.alloc(ps, false);
         clauses.push(cr);
@@ -393,6 +394,7 @@
                 }else/*auto*/{
                     
                     out_learnt.push(q);
+                    int curr_restarts = 0;
                 }/*auto*/
             }
         }
@@ -692,7 +694,7 @@
         }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -827,6 +829,13 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -913,6 +922,7 @@
                          adjust--;
                     }/*auto*/
                     if (adjust == 0)/*auto*/{
+                         static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
                          K = (double)opt_K;
                     }/*auto*/
                     LBD_cut = (int32_t)opt_lbd_cut + adjust;
@@ -1009,7 +1019,7 @@
        return l_False;
     }/*auto*/
 
-    solves++;
+    CRef confl = propagate();
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
@@ -1113,10 +1123,7 @@
     int cnt = 0;
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
       
-        if (!satisfied(ca[clauses[i]]))/*auto*/{
-            
-            cnt++;
-        }/*auto*/
+        
     }/*auto*/
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
