--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -436,7 +436,7 @@
             Lit p  = c[i];
             if (!seen[var(p)] && level(var(p)) > 0){
                 if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
-                    seen[var(p)] = 1;
+                    
                     analyze_stack.push(p);
                     analyze_toclear.push(p);
                 }else{
@@ -585,6 +585,7 @@
     }
     propagations += num_props;
     simpDB_props -= num_props;
+    static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
 
     return confl;
 }
@@ -689,7 +690,7 @@
             removeSatisfied(clauses);
         }/*auto*/
     checkGarbage();
-    rebuildOrderHeap();
+    
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -747,7 +748,7 @@
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                
                 max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)
@@ -764,7 +765,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -932,6 +933,7 @@
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
     if (satisfied(c)) /*auto*/{
+      watches.smudge(~c[1]);
       return;
     }/*auto*/
 
@@ -1014,7 +1016,7 @@
     if (verbosity > 0)
         /*auto*/{
         
-               printf("Wrote %d clauses with %d variables.\n", cnt, max);
+               
         
     }/*auto*/
 }
