--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -132,12 +132,13 @@
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
-    if (!ok) /*auto*/{
-      return false;
-    }/*auto*/
+    
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
+        /*auto*/{
+            return true;
+        }/*auto*/
     Lit p; int i, j;
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
         /*auto*/{
@@ -322,6 +323,7 @@
             if (!seen[var(q)] && level(var(q)) > 0){
                 varBumpActivity(var(q));
                 seen[var(q)] = 1;
+                
                 if (level(var(q)) >= decisionLevel())
                     /*auto*/{
                         pathC++;
@@ -742,29 +744,17 @@
                 uncheckedEnqueue(learnt_clause[0], cr);
             }
 
-            varDecayActivity();
+            
             claDecayActivity();
 
-            if (--learntsize_adjust_cnt == 0){
-                learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
-            }
+            
 
         }else{
             // NO CONFLICT
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -1017,6 +1007,7 @@
                printf("Wrote %d clauses with %d variables.\n", cnt, max);
         
     }/*auto*/
+    rebuildOrderHeap();
 }
 
 
