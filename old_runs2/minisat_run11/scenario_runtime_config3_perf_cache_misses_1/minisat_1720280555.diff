--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -367,6 +367,7 @@
             }/*auto*/
         
     }else if (ccmin_mode == 1){
+        Var x = var(out_learnt[i]);
         for (i = j = 1; i < out_learnt.size(); i++){
             Var x = var(out_learnt[i]);
 
@@ -411,6 +412,7 @@
             }/*auto*/
         // Swap-in this literal at index 1:
         Lit p             = out_learnt[max_i];
+        decisions++;
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
         out_btlevel       = level(var(p));
@@ -449,6 +451,7 @@
                 }
             }
         }
+        break;
     }
 
     return true;
@@ -486,6 +489,10 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)
                     /*auto*/{
+                        if (verbosity >= 1)
+                            /*auto*/{
+                                printf("===============================================================================\n");
+                            }/*auto*/
                         if (level(var(c[j])) > 0)
                         /*auto*/{
                             seen[var(c[j])] = 1;
@@ -553,7 +560,8 @@
             Lit     first = c[0];
             Watcher w     = Watcher(cr, first);
             if (first != blocker && value(first) == l_True){
-                *j++ = w; continue; }
+                *j++ = w; continue;
+                watches[~c[1]].push(Watcher(cr, c[0])); }
 
             // Look for new watch:
             for (int k = 2; k < c.size(); k++)
@@ -747,7 +755,7 @@
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                
                 max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)
@@ -764,7 +772,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -793,6 +801,7 @@
                     next = p;
                     break;
                 }
+                checkGarbage();
             }
 
             if (next == lit_Undef){
@@ -981,16 +990,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)
-                /*auto*/{
-                    if (value(c[j]) != l_False)
-                    /*auto*/{
-                        mapVar(var(c[j]), map, max);
-                    }/*auto*/
-                }/*auto*/
-        }
+               
         
     }/*auto*/
 
