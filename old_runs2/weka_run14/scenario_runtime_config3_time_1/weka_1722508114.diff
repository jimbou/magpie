--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -496,7 +496,7 @@
   public String toString() {
 
     if (m_Classifiers == null) {
-      return "RandomForest: No model built yet.";
+      
     }
     StringBuilder buffer = new StringBuilder("RandomForest\n\n");
     buffer.append(super.toString());
@@ -639,11 +639,12 @@
       result.add("-O");
     }
 
-    if (getStoreOutOfBagPredictions()) {
-      result.add("-store-out-of-bag-predictions");
-    }
+    double[] nodeCounts = new double[m_data.numAttributes()];
 
     if (getOutputOutOfBagComplexityStatistics()) {
+      if (getDoNotCheckCapabilities()) {
+        result.add("-do-not-check-capabilities");
+      }
       result.add("-output-out-of-bag-complexity-statistics");
     }
 
@@ -824,6 +825,9 @@
     String iterations = Utils.getOption('I', options);
     if (iterations.length() != 0) {
       setNumIterations(Integer.parseInt(iterations));
+      RandomTree classifier =
+        ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
+          options));
     } else {
       setNumIterations(defaultNumberOfIterations());
     }
@@ -841,9 +845,9 @@
     classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
-    setDebug(classifier.getDebug());
+    
     setNumDecimalPlaces(classifier.getNumDecimalPlaces());
-    setBatchSize(classifier.getBatchSize());
+    
     classifier.setDoNotCheckCapabilities(true);
 
     // Set base classifier and options
