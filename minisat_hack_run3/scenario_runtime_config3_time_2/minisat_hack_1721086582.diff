--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -444,7 +444,7 @@
                     
                     if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                         }
                 }/*auto*/
             }
         }
@@ -558,6 +558,7 @@
                     }/*auto*/
                 }/*auto*/
             }
+            Var next = var_Undef;
             seen[x] = 0;
         }
     }
@@ -827,6 +828,13 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -1144,6 +1152,7 @@
         assert(value(assumptions[i]) != l_False);
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
+    removeSatisfied(lF);
 
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
         
