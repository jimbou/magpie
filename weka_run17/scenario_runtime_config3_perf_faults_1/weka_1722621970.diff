--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -592,11 +592,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -661,9 +657,7 @@
     result.add("-num-slots");
     result.add("" + getNumExecutionSlots());
 
-    if (getDoNotCheckCapabilities()) {
-      result.add("-do-not-check-capabilities");
-    }
+    
 
     // Add base classifier options
     Vector<String> classifierOptions = new Vector<String>();
@@ -810,8 +804,7 @@
 
     setCalcOutOfBag(Utils.getFlag('O', options));
 
-    setStoreOutOfBagPredictions(Utils.getFlag("store-out-of-bag-predictions",
-      options));
+    
 
     setOutputOutOfBagComplexityStatistics(Utils.getFlag(
       "output-out-of-bag-complexity-statistics", options));
@@ -820,6 +813,7 @@
 
     setComputeAttributeImportance(Utils
       .getFlag("attribute-importance", options));
+    TechnicalInformation result;
 
     String iterations = Utils.getOption('I', options);
     if (iterations.length() != 0) {
@@ -838,7 +832,7 @@
     RandomTree classifier =
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
-    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
+    Utils.checkForRemainingOptions(options);
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
