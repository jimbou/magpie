--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -280,7 +280,7 @@
     result.setValue(Field.TITLE, "Random Forests");
     result.setValue(Field.JOURNAL, "Machine Learning");
     result.setValue(Field.VOLUME, "45");
-    result.setValue(Field.NUMBER, "1");
+    
     result.setValue(Field.PAGES, "5-32");
 
     return result;
@@ -558,7 +558,7 @@
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
       for (int i = 0; i < m_data.numAttributes(); i++) {
         impurityDecreases[i] += forClassifier[i][0];
-        nodeCounts[i] += forClassifier[i][1];
+        RandomTree rTree = new RandomTree();
       }
     }
     for (int i = 0; i < m_data.numAttributes(); i++) {
@@ -592,11 +592,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -639,9 +635,7 @@
       result.add("-O");
     }
 
-    if (getStoreOutOfBagPredictions()) {
-      result.add("-store-out-of-bag-predictions");
-    }
+    double[] nodeCounts = new double[m_data.numAttributes()];
 
     if (getOutputOutOfBagComplexityStatistics()) {
       result.add("-output-out-of-bag-complexity-statistics");
@@ -838,7 +832,7 @@
     RandomTree classifier =
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
-    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
+    Utils.checkForRemainingOptions(options);
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
