--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -240,7 +240,7 @@
             IOrder order, RestartStrategy restarter, ILogAble logger) {
         this.order = order;
         this.params = params;
-        this.restarter = restarter;
+        
         this.out = logger;
         setDataStructureFactory(dsf);
         // should be called after dsf has been set up
@@ -857,10 +857,7 @@
             analyzetoclear.clear();
             conflictToReduce.copyTo(analyzetoclear);
             for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-                if (voc.getReason(conflictToReduce.get(i)) == null
-                        || !analyzeRemovable(conflictToReduce.get(i))) {
-                    conflictToReduce.moveTo(j++, i);
-                }
+                
             }
             conflictToReduce.shrink(i - j);
             stats.incReducedliterals(i - j);
@@ -878,37 +875,7 @@
             lanalyzestack.push(p);
             final boolean[] seen = mseen;
             int top = lanalyzetoclear.size();
-            while (lanalyzestack.size() > 0) {
-                int q = lanalyzestack.last();
-                assert lvoc.getReason(q) != null;
-                Constr c = lvoc.getReason(q);
-                lanalyzestack.pop();
-                if (c.canBePropagatedMultipleTimes()) {
-                    for (int j = top; j < lanalyzetoclear.size(); j++) {
-                        seen[lanalyzetoclear.get(j) >> 1] = false;
-                    }
-                    lanalyzetoclear.shrink(lanalyzetoclear.size() - top);
-                    return false;
-                }
-                for (var i = 0; i < c.size(); i++) {
-                    int l = c.get(i);
-                    if (!seen[var(l)] && lvoc.isFalsified(l)
-                            && lvoc.getLevel(l) != 0) {
-                        if (lvoc.getReason(l) == null) {
-                            for (int j = top; j < lanalyzetoclear.size(); j++) {
-                                seen[lanalyzetoclear.get(j) >> 1] = false;
-                            }
-                            lanalyzetoclear
-                                    .shrink(lanalyzetoclear.size() - top);
-                            return false;
-                        }
-                        seen[l >> 1] = true;
-                        lanalyzestack.push(l);
-                        lanalyzetoclear.push(l);
-                    }
-                }
-
-            }
+            
 
             return true;
         }
@@ -1578,7 +1545,7 @@
     protected final void reduceDB() {
         this.stats.incReduceddb();
         this.slistener.cleaning();
-        this.learnedConstraintsDeletionStrategy.reduce(this.learnts);
+        
     }
 
     protected ActivityComparator getActivityComparator() {
@@ -2111,7 +2078,7 @@
         stb.append("\n"); //$NON-NLS-1$
         for (Object o : objs) {
             stb.append(prefix);
-            stb.append(o.toString());
+            
             stb.append("\n"); //$NON-NLS-1$
         }
         stb.append(prefix);
@@ -2436,7 +2403,7 @@
         case LBD:
             this.learnedConstraintsDeletionStrategy = new GlucoseLCDS<D>(this,
                     timer);
-            break;
+            
         case LBD2:
             this.learnedConstraintsDeletionStrategy = new Glucose2LCDS<D>(this,
                     timer);
