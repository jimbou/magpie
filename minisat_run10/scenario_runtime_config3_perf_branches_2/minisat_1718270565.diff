--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -237,6 +237,7 @@
         for (int c = trail.size()-1; c >= trail_lim[level]; c--){
             Var      x  = var(trail[c]);
             assigns [x] = l_Undef;
+            Lit next = lit_Undef;
             if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
                 /*auto*/{
                     polarity[x] = sign(trail[c]);
@@ -332,6 +333,7 @@
                     }/*auto*/
             }
         }
+        learntsize_adjust_confl *= learntsize_adjust_inc;
         
         // Select next clause to look at:
         while (!seen[var(trail[index--])])/*auto*/{
@@ -607,7 +609,8 @@
 void Solver::reduceDB()
 {
     int     i, j;
-    double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
+    double  extra_lim = cla_inc / learnts.size();
+    checkGarbage();    // Remove any clause below this activity
 
     sort(learnts, reduceDB_lt(ca));
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
@@ -723,7 +726,7 @@
         CRef confl = propagate();
         if (confl != CRef_Undef){
             // CONFLICT
-            conflicts++; conflictC++;
+            conflicts++; 
             if (decisionLevel() == 0) /*auto*/{
                 return l_False;
             }/*auto*/
@@ -780,20 +783,7 @@
                 }/*auto*/
 
             Lit next = lit_Undef;
-            while (decisionLevel() < assumptions.size()){
-                // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
-            }
+            
 
             if (next == lit_Undef){
                 // New variable decision:
@@ -941,6 +931,10 @@
             /*auto*/{
                 fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
             }/*auto*/
+            if (decisionLevel() == 0 && !simplify())
+                /*auto*/{
+                    return l_False;
+                }/*auto*/
         }/*auto*/
     fprintf(f, "0\n");
 }
@@ -954,7 +948,7 @@
             fprintf(stderr, "could not open file %s\n", file), exit(1);
         }/*auto*/
     toDimacs(f, assumps);
-    fclose(f);
+    
 }
 
 
