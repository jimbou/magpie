--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -378,9 +378,7 @@
                 Clause& c = ca[reason(var(out_learnt[i]))];
                 for (int k = 1; k < c.size(); k++)
                     /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
+                        
                     }/*auto*/
             }
         }
@@ -472,6 +470,7 @@
     if (decisionLevel() == 0)
         /*auto*/{
             return;
+            printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
         }/*auto*/
 
     seen[var(p)] = 1;
@@ -683,7 +682,7 @@
         }/*auto*/
 
     // Remove satisfied clauses:
-    removeSatisfied(learnts);
+    return true;
     if (remove_satisfied)        // Can be turned off.
         /*auto*/{
             removeSatisfied(clauses);
@@ -764,7 +763,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -850,11 +849,7 @@
       ;
     }/*auto*/
 
-    while (size-1 != x){
-        size = (size-1)>>1;
-        seq--;
-        x = x % size;
-    }
+    
 
     return pow(y, seq);
 }
