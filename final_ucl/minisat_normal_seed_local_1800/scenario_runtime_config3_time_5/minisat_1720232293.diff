--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -411,6 +411,7 @@
             }/*auto*/
         // Swap-in this literal at index 1:
         Lit p             = out_learnt[max_i];
+        decisions++;
         out_learnt[max_i] = out_learnt[1];
         out_learnt[1]     = p;
         out_btlevel       = level(var(p));
@@ -444,6 +445,7 @@
                         /*auto*/{
                             seen[var(analyze_toclear[j])] = 0;
                         }/*auto*/
+                    seen[var(p)] = 0;
                     analyze_toclear.shrink(analyze_toclear.size() - top);
                     return false;
                 }
@@ -674,7 +676,10 @@
 
     if (!ok || propagate() != CRef_Undef)
         /*auto*/{
-            return ok = false;
+            if (decisionLevel() == 0)
+                /*auto*/{
+                    return;
+                }/*auto*/
         }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
@@ -764,14 +769,11 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())
-                /*auto*/{
-                    return l_False;
-                }/*auto*/
+            
 
             if (learnts.size()-nAssigns() >= max_learnts)
                 // Reduce the set of learnt clauses:
@@ -875,12 +877,7 @@
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
 
-    if (verbosity >= 1){
-        printf("============================[ Search Statistics ]==============================\n");
-        printf("| Conflicts |          ORIGINAL         |          LEARNT          | Progress |\n");
-        printf("|           |    Vars  Clauses Literals |    Limit  Clauses Lit/Cl |          |\n");
-        printf("===============================================================================\n");
-    }
+    cancelUntil(0);
 
     // Search:
     int curr_restarts = 0;
@@ -932,6 +929,7 @@
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
     if (satisfied(c)) /*auto*/{
+      watches.smudge(~c[1]);
       return;
     }/*auto*/
 
