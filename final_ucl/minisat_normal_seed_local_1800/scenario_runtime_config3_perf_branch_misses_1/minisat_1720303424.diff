--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -132,6 +132,7 @@
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
+    decision .push();
     if (!ok) /*auto*/{
       return false;
     }/*auto*/
@@ -449,6 +450,7 @@
                 }
             }
         }
+        break;
     }
 
     return true;
@@ -503,6 +505,7 @@
 void Solver::uncheckedEnqueue(Lit p, CRef from)
 {
     assert(value(p) == l_Undef);
+    double  F = 1.0 / nVars();
     assigns[var(p)] = lbool(!sign(p));
     vardata[var(p)] = mkVarData(from, decisionLevel());
     trail.push_(p);
@@ -639,7 +642,7 @@
             }/*auto*/
         else
             /*auto*/{
-                cs[j++] = cs[i];
+                learntsize_adjust_confl *= learntsize_adjust_inc;
             }/*auto*/
     }
     cs.shrink(i - j);
@@ -747,7 +750,7 @@
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                
                 max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)
@@ -764,14 +767,11 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())
-                /*auto*/{
-                    return l_False;
-                }/*auto*/
+            
 
             if (learnts.size()-nAssigns() >= max_learnts)
                 // Reduce the set of learnt clauses:
@@ -862,7 +862,7 @@
 // NOTE: assumptions passed in member-variable 'assumptions'.
 lbool Solver::solve_()
 {
-    model.clear();
+    
     conflict.clear();
     if (!ok) /*auto*/{
       return l_False;
@@ -1064,7 +1064,7 @@
     //
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
-            ca.reloc(clauses[i], to);
+            
         }/*auto*/
 }
 
