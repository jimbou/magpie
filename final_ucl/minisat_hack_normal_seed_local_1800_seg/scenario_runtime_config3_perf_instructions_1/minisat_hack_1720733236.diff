--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -362,14 +362,15 @@
     int index   = trail.size() - 1;
 
     do{
-        assert(confl != CRef_Undef); // (otherwise should be UIP)
+        assert(confl != CRef_Undef);
+        lbool   status            = l_Undef; // (otherwise should be UIP)
         Clause& c = ca[confl];
 
         if (c.learnt() && c.mark() != 3){
             LBD(c);
             c.mark(L < LBD_cut ? 3 : 2);
             if (L < LBD_cut){
-                lF.push(confl);
+                
                 core_added++;
             }else/*auto*/{
                 
@@ -463,6 +464,7 @@
     //
     if (out_learnt.size() == 1)/*auto*/{
       
+        cancelUntil(0);
         out_btlevel = 0;
     }/*auto*/
     else{
@@ -554,7 +556,7 @@
                     
                     if (level(var(c[j])) > 0)/*auto*/{
                         
-                        seen[var(c[j])] = 1;
+                        core_added = 0;
                     }/*auto*/
                 }/*auto*/
             }
@@ -590,7 +592,7 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
-    watches.cleanAll();
+    
 
     while (qhead < trail.size()){
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
@@ -675,7 +677,9 @@
     int     i, j;
     //double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
 
-    sort(learnts, reduceDB_lt(ca));
+    for (int j = 0; j < analyze_toclear.size(); j++)/*auto*/{
+       seen[var(analyze_toclear[j])] = 0;
+    }/*auto*/
     // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
@@ -797,7 +801,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -806,7 +810,7 @@
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 
-                var_decay += 0.01;
+                
             }/*auto*/
             if (decisionLevel() == 0)/*auto*/{
                  return l_False;
@@ -890,35 +894,7 @@
                 return l_False;
             }/*auto*/
 
-            if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
-                // Reduce the set of learnt clauses:
-                reduceDB();
-
-                static int adjust = 0;
-                if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-                    }/*auto*/
-
-                    if (!luby_restart){
-                        core_added = 0;
-                        K = 1;
-                        lS = 0, LQ.clear();
-                        cancelUntil(0);
-                        return l_Undef; }
-                }else{
-                    if (adjust > 0)/*auto*/{
-                         adjust--;
-                    }/*auto*/
-                    if (adjust == 0)/*auto*/{
-                         K = (double)opt_K;
-                    }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
-                }
-                core_added = 0;
-            }
+            
 
             Lit next = lit_Undef;
             /*while (decisionLevel() < assumptions.size()){
@@ -1009,7 +985,7 @@
        return l_False;
     }/*auto*/
 
-    solves++;
+    
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
