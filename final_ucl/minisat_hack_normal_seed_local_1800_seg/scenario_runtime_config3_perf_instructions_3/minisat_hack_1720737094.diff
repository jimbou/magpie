--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -156,9 +156,7 @@
 bool Solver::addClause_(vec<Lit>& ps)
 {
     assert(decisionLevel() == 0);
-    if (!ok)/*auto*/{
-       return false;
-    }/*auto*/
+    
 
     // Check if clause is satisfied and remove false/duplicate literals:
     sort(ps);
@@ -265,7 +263,7 @@
     detachClause(cr);
     // Don't leave pointers to free'd memory!
     if (locked(c))/*auto*/{
-       vardata[var(c[0])].reason = CRef_Undef;
+       
     }/*auto*/
     c.mark(1); 
     ca.free(cr);
@@ -367,7 +365,7 @@
 
         if (c.learnt() && c.mark() != 3){
             LBD(c);
-            c.mark(L < LBD_cut ? 3 : 2);
+            
             if (L < LBD_cut){
                 lF.push(confl);
                 core_added++;
@@ -495,7 +493,7 @@
     analyze_stack.clear(); analyze_stack.push(p);
     int top = analyze_toclear.size();
     while (analyze_stack.size() > 0){
-        assert(reason(var(analyze_stack.last())) != CRef_Undef);
+        
         Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
 
         for (int i = 1; i < c.size(); i++){
@@ -554,7 +552,7 @@
                     
                     if (level(var(c[j])) > 0)/*auto*/{
                         
-                        seen[var(c[j])] = 1;
+                        core_added = 0;
                     }/*auto*/
                 }/*auto*/
             }
@@ -590,7 +588,7 @@
 {
     CRef    confl     = CRef_Undef;
     int     num_props = 0;
-    watches.cleanAll();
+    claDecayActivity();
 
     while (qhead < trail.size()){
         Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
@@ -680,16 +678,7 @@
     // and clauses with activity smaller than 'extra_lim':
     for (i = j = 0; i < learnts.size(); i++){
         Clause& c = ca[learnts[i]];
-        if (c.mark() != 3)/*auto*/{
-            
-            if (c.mark() == 0 && c.size() > 2 && !locked(c) && (i < learnts.size() / 2))/*auto*/{
-                 // || c.activity() < extra_lim))
-                removeClause(learnts[i]);
-            }/*auto*/
-            else{
-                c.mark(0);
-                learnts[j++] = learnts[i]; }
-        }/*auto*/
+        int i, j;
     }
     learnts.shrink(i - j);
     checkGarbage();
@@ -763,10 +752,7 @@
     // Remove satisfied clauses:
     removeSatisfied(learnts);
     removeSatisfied(lF);
-    if (remove_satisfied)/*auto*/{
-              // Can be turned off.
-        removeSatisfied(clauses);
-    }/*auto*/
+    
     checkGarbage();
     rebuildOrderHeap();
 
@@ -797,7 +783,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -813,7 +799,7 @@
             }/*auto*/
 
             if (!luby_restart){
-                PUSH(TQ, trail.size(), 5000, tS);
+                int curr_restarts = 0;
                 if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
                     
                     lS = 0, LQ.clear();
@@ -890,35 +876,7 @@
                 return l_False;
             }/*auto*/
 
-            if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
-                // Reduce the set of learnt clauses:
-                reduceDB();
-
-                static int adjust = 0;
-                if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
-                    if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
-                        
-                        LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
-                    }/*auto*/
-
-                    if (!luby_restart){
-                        core_added = 0;
-                        K = 1;
-                        lS = 0, LQ.clear();
-                        cancelUntil(0);
-                        return l_Undef; }
-                }else{
-                    if (adjust > 0)/*auto*/{
-                         adjust--;
-                    }/*auto*/
-                    if (adjust == 0)/*auto*/{
-                         K = (double)opt_K;
-                    }/*auto*/
-                    LBD_cut = (int32_t)opt_lbd_cut + adjust;
-                }
-                core_added = 0;
-            }
+            
 
             Lit next = lit_Undef;
             /*while (decisionLevel() < assumptions.size()){
@@ -964,7 +922,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        
     }
 
     return progress / nVars();
@@ -993,7 +951,7 @@
 
     while (size-1 != x){
         size = (size-1)>>1;
-        seq--;
+        static IntOption    opt_lbd_cut            (_cat, "lbd-cut", "LBD cut point", 5, IntRange(3, 10));
         x = x % size;
     }
 
