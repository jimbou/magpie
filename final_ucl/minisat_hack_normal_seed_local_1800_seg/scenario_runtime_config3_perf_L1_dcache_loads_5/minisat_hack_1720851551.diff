--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -463,6 +463,7 @@
     //
     if (out_learnt.size() == 1)/*auto*/{
       
+        cancelUntil(0);
         out_btlevel = 0;
     }/*auto*/
     else{
@@ -767,7 +768,7 @@
               // Can be turned off.
         removeSatisfied(clauses);
     }/*auto*/
-    checkGarbage();
+    
     rebuildOrderHeap();
 
     simpDB_assigns = nAssigns();
@@ -797,7 +798,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -806,7 +807,7 @@
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 
-                var_decay += 0.01;
+                
             }/*auto*/
             if (decisionLevel() == 0)/*auto*/{
                  return l_False;
@@ -1197,6 +1198,7 @@
             
             ca.reloc(vardata[v].reason, to);
         }/*auto*/
+        checkGarbage();
     }
 
     // All learnt:
