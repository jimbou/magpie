--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -312,10 +312,7 @@
     // Random decision:
     if (drand(random_seed) < random_var_freq && !order_heap.empty()){
         next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])/*auto*/{
-            
-            rnd_decisions++;
-        }/*auto*/ }
+         }
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])/*auto*/{
@@ -703,7 +700,7 @@
         Clause& c = ca[cs[i]];
         if (satisfied(c))/*auto*/{
             
-            removeClause(cs[i]);
+            
         }/*auto*/
         else/*auto*/{
             
@@ -763,10 +760,7 @@
     // Remove satisfied clauses:
     removeSatisfied(learnts);
     removeSatisfied(lF);
-    if (remove_satisfied)/*auto*/{
-              // Can be turned off.
-        removeSatisfied(clauses);
-    }/*auto*/
+    
     checkGarbage();
     rebuildOrderHeap();
 
@@ -797,7 +791,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -827,6 +821,13 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -1009,7 +1010,7 @@
        return l_False;
     }/*auto*/
 
-    solves++;
+    CRef confl = propagate();
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
@@ -1026,6 +1027,7 @@
     // Search:
     int curr_restarts = 0;
     while (status == l_Undef){
+        claDecayActivity();
         double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : 0;//pow(restart_inc, curr_restarts);
         status = search(rest_base * restart_first);
         if (!withinBudget())/*auto*/{
@@ -1042,6 +1044,7 @@
 
     if (status == l_True){
         // Extend & copy model:
+        static const char* _cat = "CORE";
         model.growTo(nVars());
         for (int i = 0; i < nVars(); i++)/*auto*/{
              model[i] = value(i);
