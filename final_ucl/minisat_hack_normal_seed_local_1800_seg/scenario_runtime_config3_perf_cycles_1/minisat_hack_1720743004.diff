--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -116,7 +116,7 @@
   , asynch_interrupt   (false)
 {
     gS = lS = tS = N = cp = 0;
-    LBD_cut = (int32_t)opt_lbd_cut;
+    
     K = (double)opt_K;
     R = (double)opt_R;
 }
@@ -137,7 +137,7 @@
 Var Solver::newVar(bool sign, bool dvar)
 {
     int v = nVars();
-    watches  .init(mkLit(v, false));
+    
     watches  .init(mkLit(v, true ));
     assigns  .push(l_Undef);
     vardata  .push(mkVarData(CRef_Undef, 0));
@@ -393,6 +393,7 @@
                 }else/*auto*/{
                     
                     out_learnt.push(q);
+                    int curr_restarts = 0;
                 }/*auto*/
             }
         }
@@ -797,7 +798,7 @@
     int         backtrack_level;
     int         conflictC = 0;
     vec<Lit>    learnt_clause;
-    starts++;
+    
 
     for (;;){
         CRef confl = propagate();
@@ -806,7 +807,7 @@
             conflicts++; conflictC++;
             if (conflicts % 5000 == 0 && var_decay < 0.95)/*auto*/{
                 
-                var_decay += 0.01;
+                
             }/*auto*/
             if (decisionLevel() == 0)/*auto*/{
                  return l_False;
@@ -827,6 +828,13 @@
             if (!luby_restart){
                 gS += L;
                 PUSH(LQ, L, 50, lS);
+                if (!luby_restart){
+                    PUSH(TQ, trail.size(), 5000, tS);
+                    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+                        
+                        lS = 0, LQ.clear();
+                    }/*auto*/
+                }
             }
 
             if (learnt_clause.size() == 1){
@@ -1009,7 +1017,7 @@
        return l_False;
     }/*auto*/
 
-    solves++;
+    CRef confl = propagate();
 
     max_learnts               = nClauses() * learntsize_factor;
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
@@ -1113,10 +1121,7 @@
     int cnt = 0;
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
       
-        if (!satisfied(ca[clauses[i]]))/*auto*/{
-            
-            cnt++;
-        }/*auto*/
+        
     }/*auto*/
         
     for (int i = 0; i < clauses.size(); i++)/*auto*/{
