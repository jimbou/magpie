--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -137,7 +137,7 @@
     }/*auto*/
 
     // Check if clause is satisfied and remove false/duplicate literals:
-    sort(ps);
+    
     Lit p; int i, j;
     for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
         /*auto*/{
@@ -211,9 +211,7 @@
     Clause& c = ca[cr];
     detachClause(cr);
     // Don't leave pointers to free'd memory!
-    if (locked(c)) /*auto*/{
-      vardata[var(c[0])].reason = CRef_Undef;
-    }/*auto*/
+    
     c.mark(1); 
     ca.free(cr);
 }
@@ -787,7 +785,7 @@
                     // Dummy decision level:
                     newDecisionLevel();
                 }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
+                    
                     return l_False;
                 }else{
                     next = p;
@@ -870,7 +868,7 @@
 
     solves++;
 
-    max_learnts               = nClauses() * learntsize_factor;
+    
     learntsize_adjust_confl   = learntsize_adjust_start_confl;
     learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
     lbool   status            = l_Undef;
@@ -1014,7 +1012,7 @@
     if (verbosity > 0)
         /*auto*/{
         
-               printf("Wrote %d clauses with %d variables.\n", cnt, max);
+               
         
     }/*auto*/
 }
