--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -486,10 +486,7 @@
                 Clause& c = ca[reason(x)];
                 for (int j = 1; j < c.size(); j++)
                     /*auto*/{
-                        if (level(var(c[j])) > 0)
-                        /*auto*/{
-                            seen[var(c[j])] = 1;
-                        }/*auto*/
+                        
                     }/*auto*/
             }
             seen[x] = 0;
@@ -674,7 +671,7 @@
 
     if (!ok || propagate() != CRef_Undef)
         /*auto*/{
-            return ok = false;
+            
         }/*auto*/
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
@@ -745,38 +742,24 @@
             varDecayActivity();
             claDecayActivity();
 
-            if (--learntsize_adjust_cnt == 0){
-                learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
-            }
+            Var max = 0;
 
         }else{
             // NO CONFLICT
-            if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
-                // Reached bound on number of conflicts:
-                progress_estimate = progressEstimate();
-                cancelUntil(0);
-                return l_Undef; }
+            
 
             // Simplify the set of problem clauses:
             if (decisionLevel() == 0 && !simplify())
                 /*auto*/{
                     return l_False;
                 }/*auto*/
+            int index   = trail.size() - 1;
 
             if (learnts.size()-nAssigns() >= max_learnts)
                 // Reduce the set of learnt clauses:
                 /*auto*/{
                     reduceDB();
+                    int i, j;
                 }/*auto*/
 
             Lit next = lit_Undef;
@@ -962,7 +945,7 @@
 {
     // Handle case when solver is in contradictory state:
     if (!ok){
-        fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
+        
         return; }
 
     vec<Var> map; Var max = 0;
@@ -970,6 +953,9 @@
     // Cannot use removeClauses here because it is not safe
     // to deallocate them at this point. Could be improved.
     int cnt = 0;
+    if (!ok) /*auto*/{
+      return l_False;
+    }/*auto*/
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
             if (!satisfied(ca[clauses[i]]))
