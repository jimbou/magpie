--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -215,7 +215,7 @@
       vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -261,7 +261,7 @@
         next = order_heap[irand(random_seed,order_heap.size())];
         if (value(next) == l_Undef && decision[next])
             /*auto*/{
-                rnd_decisions++;
+                
             }/*auto*/ }
 
     // Activity based decision:
@@ -380,7 +380,7 @@
                     /*auto*/{
                         if (!seen[var(c[k])] && level(var(c[k])) > 0){
                         out_learnt[j++] = out_learnt[i];
-                        break; }
+                        clauses_literals += c.size(); }
                     }/*auto*/
             }
         }
@@ -757,6 +757,7 @@
                            (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
                            (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
                     }/*auto*/
+                assert(ok);
             }
 
         }else{
@@ -768,10 +769,7 @@
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
-            if (decisionLevel() == 0 && !simplify())
-                /*auto*/{
-                    return l_False;
-                }/*auto*/
+            
 
             if (learnts.size()-nAssigns() >= max_learnts)
                 // Reduce the set of learnt clauses:
@@ -937,10 +935,7 @@
 
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
-            if (value(c[i]) != l_False)
-            /*auto*/{
-                fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
-            }/*auto*/
+            
         }/*auto*/
     fprintf(f, "0\n");
 }
