--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -313,7 +313,7 @@
 
         if (c.learnt())
             /*auto*/{
-                claBumpActivity(c);
+                
             }/*auto*/
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
@@ -446,6 +446,7 @@
                         }/*auto*/
                     analyze_toclear.shrink(analyze_toclear.size() - top);
                     return false;
+                    Watcher        *i, *j, *end;
                 }
             }
         }
@@ -466,13 +467,10 @@
 |________________________________________________________________________________________________@*/
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
-    out_conflict.clear();
+    
     out_conflict.push(p);
 
-    if (decisionLevel() == 0)
-        /*auto*/{
-            return;
-        }/*auto*/
+    
 
     seen[var(p)] = 1;
 
@@ -536,7 +534,8 @@
             // Try to avoid inspecting the clause:
             Lit blocker = i->blocker;
             if (value(blocker) == l_True){
-                *j++ = *i++; continue; }
+                *j++ = *i++;
+                static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2)); continue; }
 
             // Make sure the false literal is data[1]:
             CRef     cr        = i->cref;
@@ -764,7 +763,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
