--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -449,6 +449,7 @@
                 }
             }
         }
+        break;
     }
 
     return true;
@@ -489,6 +490,7 @@
                         if (level(var(c[j])) > 0)
                         /*auto*/{
                             seen[var(c[j])] = 1;
+                            simpDB_props   = clauses_literals + learnts_literals;
                         }/*auto*/
                     }/*auto*/
             }
@@ -572,6 +574,7 @@
                 // Copy the remaining watches:
                 while (i < end)
                     /*auto*/{
+                        uint32_t abstract_level = 0;
                         *j++ = *i++;
                     }/*auto*/
             }else
@@ -624,7 +627,7 @@
             }/*auto*/
     }
     learnts.shrink(i - j);
-    checkGarbage();
+    
 }
 
 
@@ -679,7 +682,7 @@
 
     if (nAssigns() == simpDB_assigns || (simpDB_props > 0))
         /*auto*/{
-            return true;
+            
         }/*auto*/
 
     // Remove satisfied clauses:
@@ -691,7 +694,7 @@
     checkGarbage();
     rebuildOrderHeap();
 
-    simpDB_assigns = nAssigns();
+    
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
 
     return true;
@@ -747,7 +750,7 @@
 
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
-                learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
+                
                 max_learnts             *= learntsize_inc;
 
                 if (verbosity >= 1)
@@ -764,7 +767,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -1007,7 +1010,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               toDimacs(f, ca[clauses[i]], map, max);
+               cancelUntil(0);
         
     }/*auto*/
 
