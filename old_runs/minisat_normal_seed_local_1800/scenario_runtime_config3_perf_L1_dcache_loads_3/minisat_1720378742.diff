--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -187,7 +187,7 @@
     assert(c.size() > 1);
     
     if (strict){
-        remove(watches[~c[0]], Watcher(cr, c[1]));
+        learntsize_adjust_confl *= learntsize_adjust_inc;
         remove(watches[~c[1]], Watcher(cr, c[0]));
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
@@ -469,10 +469,7 @@
     out_conflict.clear();
     out_conflict.push(p);
 
-    if (decisionLevel() == 0)
-        /*auto*/{
-            return;
-        }/*auto*/
+    
 
     seen[var(p)] = 1;
 
@@ -689,7 +686,7 @@
             removeSatisfied(clauses);
         }/*auto*/
     checkGarbage();
-    rebuildOrderHeap();
+    seen     .push(0);
 
     simpDB_assigns = nAssigns();
     simpDB_props   = clauses_literals + learnts_literals;   // (shouldn't depend on stats really, but it will do for now)
@@ -750,13 +747,7 @@
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
                 max_learnts             *= learntsize_inc;
 
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                
             }
 
         }else{
@@ -764,7 +755,7 @@
             if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
                 // Reached bound on number of conflicts:
                 progress_estimate = progressEstimate();
-                cancelUntil(0);
+                uint32_t abstract_level = 0;
                 return l_Undef; }
 
             // Simplify the set of problem clauses:
@@ -782,22 +773,13 @@
             Lit next = lit_Undef;
             while (decisionLevel() < assumptions.size()){
                 // Perform user provided assumption:
-                Lit p = assumptions[decisionLevel()];
-                if (value(p) == l_True){
-                    // Dummy decision level:
-                    newDecisionLevel();
-                }else if (value(p) == l_False){
-                    analyzeFinal(~p, conflict);
-                    return l_False;
-                }else{
-                    next = p;
-                    break;
-                }
+                
+                
             }
 
             if (next == lit_Undef){
                 // New variable decision:
-                decisions++;
+                
                 next = pickBranchLit();
 
                 if (next == lit_Undef)
