2024-06-26 15:08:29,988	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 8470650393932190
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = True
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 1e6
diff_method = unified
trust_local_filesystem = True

[magpie.log]
color_output = True
format_info = {counter:<7} {status:<20} {best}{fitness} ({ratio}) [{size}] {cached} {log}
format_debug = patch({counter})="{patch}"{diffifbest}
format_fitness = {:.6f}
format_ratio = {:.2%%}
format_patchif = 
	 --> {patch}
format_diffif = 
	{diff}

[software]
path = examples/minisat_hack
target_files = sources/core/Solver.cc.xml
software = BasicSoftware
model_rules = 
	*.params : ParamFileConfigModel
	*.xml : SrcmlModel
	* : LineModel
model_config = 
	*.params : [paramconfig]
	*.xml : [srcml]
init_cmd = 
init_timeout = 60
init_lengthout = -1
setup_cmd = ./build.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./build.sh
compile_timeout = 
compile_lengthout = 
test_cmd = ./test.sh
test_timeout = 
test_lengthout = 
run_cmd = perf stat -e faults bash run_fixed.sh
run_timeout = 
run_lengthout = 
retries = 1
batch_timeout = 
batch_lengthout = 
batch_bin_fitness_strategy = aggregate
batch_fitness_strategy = sum
fitness = perf_faults

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[paramconfig]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
cli_none = hide
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = FirstImprovement
possible_edits = 
	SrcmlStmtReplacement
	SrcmlStmtInsertion
	SrcmlStmtDeletion
warmup = 3
warmup_strategy = last
max_steps = 1000
max_time = 70
target_fitness = 
cache_maxsize = 100
cache_keep = 0.2
batch_instances = 
batch_shuffle = True
batch_bin_shuffle = False
batch_sample_size = 1

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5
batch_reset = True

[search.minify]
do_cleanup = True
do_rebuild = True
do_simplify = True
round_robin_limit = 3


2024-06-26 15:08:29,989	[DEBUG]	
2024-06-26 15:08:29,989	[INFO]	==== SEARCH: FirstImprovement ====
2024-06-26 15:08:29,989	[INFO]	~~~~ WARMUP ~~~~
2024-06-26 15:08:44,883	[DEBUG]	EXEC>  SUCCESS 6661.0
2024-06-26 15:08:44,884	[INFO]	WARM    SUCCESS               6661.000000 (--) [0 edit(s)]  
2024-06-26 15:08:54,865	[DEBUG]	EXEC>  SUCCESS 6646.0
2024-06-26 15:08:54,865	[INFO]	WARM    SUCCESS               6646.000000 (--) [0 edit(s)]  
2024-06-26 15:09:04,751	[DEBUG]	EXEC>  SUCCESS 6662.0
2024-06-26 15:09:04,751	[INFO]	WARM    SUCCESS               6662.000000 (--) [0 edit(s)]  
2024-06-26 15:09:04,751	[INFO]	REF     SUCCESS               6662.000000 (--) [0 edit(s)]  
2024-06-26 15:09:04,751	[INFO]	
2024-06-26 15:09:04,752	[INFO]	~~~~ START ~~~~
2024-06-26 15:09:07,760	[INFO]	1       COMPILE_CODE_ERROR    None (--) [1 edit(s)]  
2024-06-26 15:09:07,760	[DEBUG]	patch(1)="SrcmlStmtReplacement(('sources/core/Solver.cc.xml', 'stmt', 41), ('sources/core/Solver.cc.xml', 'stmt', 334))"
2024-06-26 15:09:12,445	[INFO]	2       TEST_CODE_ERROR       None (--) [1 edit(s)]  
2024-06-26 15:09:12,445	[DEBUG]	patch(2)="SrcmlStmtReplacement(('sources/core/Solver.cc.xml', 'stmt', 187), ('sources/core/Solver.cc.xml', 'stmt', 394))"
2024-06-26 15:09:15,455	[INFO]	3       COMPILE_CODE_ERROR    None (--) [1 edit(s)]  
2024-06-26 15:09:15,455	[DEBUG]	patch(3)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 10), ('sources/core/Solver.cc.xml', 'stmt', 168))"
2024-06-26 15:09:18,458	[INFO]	4       COMPILE_CODE_ERROR    None (--) [1 edit(s)]  
2024-06-26 15:09:18,458	[DEBUG]	patch(4)="SrcmlStmtReplacement(('sources/core/Solver.cc.xml', 'stmt', 377), ('sources/core/Solver.cc.xml', 'stmt', 120))"
2024-06-26 15:09:28,342	[DEBUG]	EXEC>  SUCCESS 6646.0
2024-06-26 15:09:28,342	[INFO]	5       SUCCESS              *6646.000000 (99.76%) [1 edit(s)]  
2024-06-26 15:09:28,342	[DEBUG]	patch(5)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345))"
--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -903,6 +903,35 @@
                     }/*auto*/
 
                     if (!luby_restart){
+                        if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
+                            cp = conflicts + (int32_t)opt_cp_increase;
+                            // Reduce the set of learnt clauses:
+                            reduceDB();
+
+                            static int adjust = 0;
+                            if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
+                                if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
+                                    
+                                    LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
+                                }/*auto*/
+
+                                if (!luby_restart){
+                                    core_added = 0;
+                                    K = 1;
+                                    lS = 0, LQ.clear();
+                                    cancelUntil(0);
+                                    return l_Undef; }
+                            }else{
+                                if (adjust > 0)/*auto*/{
+                                     adjust--;
+                                }/*auto*/
+                                if (adjust == 0)/*auto*/{
+                                     K = (double)opt_K;
+                                }/*auto*/
+                                LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                            }
+                            core_added = 0;
+                        }
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();

2024-06-26 15:09:38,202	[DEBUG]	EXEC>  SUCCESS 6622.0
2024-06-26 15:09:38,202	[INFO]	6       SUCCESS              *6622.000000 (99.40%) [2 edit(s)]  
2024-06-26 15:09:38,202	[DEBUG]	patch(6)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388))"
--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -903,6 +903,35 @@
                     }/*auto*/
 
                     if (!luby_restart){
+                        if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
+                            cp = conflicts + (int32_t)opt_cp_increase;
+                            // Reduce the set of learnt clauses:
+                            reduceDB();
+
+                            static int adjust = 0;
+                            if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){
+                                if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{
+                                    
+                                    LBD_cut = (int32_t)opt_lbd_cut + ++adjust;
+                                }/*auto*/
+
+                                if (!luby_restart){
+                                    core_added = 0;
+                                    K = 1;
+                                    lS = 0, LQ.clear();
+                                    cancelUntil(0);
+                                    return l_Undef; }
+                            }else{
+                                if (adjust > 0)/*auto*/{
+                                     adjust--;
+                                }/*auto*/
+                                if (adjust == 0)/*auto*/{
+                                     K = (double)opt_K;
+                                }/*auto*/
+                                LBD_cut = (int32_t)opt_lbd_cut + adjust;
+                            }
+                            core_added = 0;
+                        }
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
@@ -1006,7 +1035,7 @@
     model.clear();
     conflict.clear();
     if (!ok)/*auto*/{
-       return l_False;
+       
     }/*auto*/
 
     solves++;

2024-06-26 15:09:48,142	[DEBUG]	EXEC>  SUCCESS 6661.0
2024-06-26 15:09:48,142	[INFO]	7       SUCCESS               6661.000000 (99.98%) [1 edit(s)]  
2024-06-26 15:09:48,142	[DEBUG]	patch(7)="SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388))"
2024-06-26 15:09:51,158	[INFO]	8       COMPILE_CODE_ERROR    None (--) [3 edit(s)]  
2024-06-26 15:09:51,158	[DEBUG]	patch(8)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388)) | SrcmlStmtReplacement(('sources/core/Solver.cc.xml', 'stmt', 433), ('sources/core/Solver.cc.xml', 'stmt', 104))"
2024-06-26 15:09:54,183	[INFO]	9       COMPILE_CODE_ERROR    None (--) [3 edit(s)]  
2024-06-26 15:09:54,183	[DEBUG]	patch(9)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 300))"
2024-06-26 15:09:57,213	[INFO]	10      COMPILE_CODE_ERROR    None (--) [3 edit(s)]  
2024-06-26 15:09:57,213	[DEBUG]	patch(10)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388)) | SrcmlStmtReplacement(('sources/core/Solver.cc.xml', 'stmt', 344), ('sources/core/Solver.cc.xml', 'stmt', 453))"
2024-06-26 15:09:57,220	[INFO]	11      SUCCESS               6646.000000 (99.76%) [1 edit(s)] [cached] 
2024-06-26 15:09:57,220	[DEBUG]	patch(11)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345))"
2024-06-26 15:10:07,060	[DEBUG]	EXEC>  SUCCESS 6625.0
2024-06-26 15:10:07,060	[INFO]	12      SUCCESS               6625.000000 (99.44%) [3 edit(s)]  
2024-06-26 15:10:07,060	[DEBUG]	patch(12)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 52))"
2024-06-26 15:10:16,891	[DEBUG]	EXEC>  SUCCESS 6675.0
2024-06-26 15:10:16,891	[INFO]	13      SUCCESS               6675.000000 (100.20%) [3 edit(s)]  
2024-06-26 15:10:16,891	[DEBUG]	patch(13)="SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 284))"
2024-06-26 15:10:16,898	[INFO]	~~~~ END ~~~~
2024-06-26 15:10:16,898	[INFO]	
2024-06-26 15:10:16,898	[INFO]	==== REPORT ====
2024-06-26 15:10:16,898	[INFO]	Termination: time budget
2024-06-26 15:10:16,898	[INFO]	Retries: 1
2024-06-26 15:10:16,898	[INFO]	Log file: /home/dbouras/magpie/_magpie_logs/minisat_hack_1719410909.log
2024-06-26 15:10:16,898	[INFO]	Patch file: _magpie_logs/minisat_hack_1719410909.patch
2024-06-26 15:10:16,898	[INFO]	Diff file: _magpie_logs/minisat_hack_1719410909.diff
2024-06-26 15:10:16,898	[INFO]	Reference fitness: 6662.000000
2024-06-26 15:10:16,898	[INFO]	Best fitness: 6622.000000
2024-06-26 15:10:16,899	[INFO]	
2024-06-26 15:10:16,899	[INFO]	==== BEST PATCH ====
SrcmlStmtInsertion(('sources/core/Solver.cc.xml', '_inter_block', 484), ('sources/core/Solver.cc.xml', 'stmt', 345)) | SrcmlStmtDeletion(('sources/core/Solver.cc.xml', 'stmt', 388))
2024-06-26 15:10:16,899	[INFO]	
2024-06-26 15:10:16,900	[INFO]	==== DIFF ====
[1m--- before: sources/core/Solver.cc[0m
[1m+++ after: sources/core/Solver.cc[0m
[36m@@ -903,6 +903,35 @@[0m
                     }/*auto*/
 
                     if (!luby_restart){
[32m+                        if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){[0m
[32m+                            cp = conflicts + (int32_t)opt_cp_increase;[0m
[32m+                            // Reduce the set of learnt clauses:[0m
[32m+                            reduceDB();[0m
[32m+[0m
[32m+                            static int adjust = 0;[0m
[32m+                            if (core_added < (int32_t)opt_cp_increase * (double)opt_core_tolerance){[0m
[32m+                                if (LBD_cut < (int32_t)opt_lbd_cut_max)/*auto*/{[0m
[32m+                                    [0m
[32m+                                    LBD_cut = (int32_t)opt_lbd_cut + ++adjust;[0m
[32m+                                }/*auto*/[0m
[32m+[0m
[32m+                                if (!luby_restart){[0m
[32m+                                    core_added = 0;[0m
[32m+                                    K = 1;[0m
[32m+                                    lS = 0, LQ.clear();[0m
[32m+                                    cancelUntil(0);[0m
[32m+                                    return l_Undef; }[0m
[32m+                            }else{[0m
[32m+                                if (adjust > 0)/*auto*/{[0m
[32m+                                     adjust--;[0m
[32m+                                }/*auto*/[0m
[32m+                                if (adjust == 0)/*auto*/{[0m
[32m+                                     K = (double)opt_K;[0m
[32m+                                }/*auto*/[0m
[32m+                                LBD_cut = (int32_t)opt_lbd_cut + adjust;[0m
[32m+                            }[0m
[32m+                            core_added = 0;[0m
[32m+                        }[0m
                         core_added = 0;
                         K = 1;
                         lS = 0, LQ.clear();
[36m@@ -1006,7 +1035,7 @@[0m
     model.clear();
     conflict.clear();
     if (!ok)/*auto*/{
[31m-       return l_False;[0m
[32m+       [0m
     }/*auto*/
 
     solves++;

