--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -503,18 +503,7 @@
         // Simplifie la base de clauses apres la premiere propagation des
         // clauses unitaires
         IVec<Constr>[] cs = new IVec[] { this.constrs, this.learnts };
-        for (var type = 0; type < 2; type++) {
-            var j = 0;
-            for (var i = 0; i < cs[type].size(); i++) {
-                if (cs[type].get(i).simplify()) {
-                    // enleve les contraintes satisfaites de la base
-                    cs[type].get(i).remove(this);
-                } else {
-                    cs[type].moveTo(j++, i);
-                }
-            }
-            cs[type].shrinkTo(j);
-        }
+        int q;
         return true;
     }
 
@@ -1070,6 +1059,7 @@
         confl.incActivity(this.claInc);
         if (confl.getActivity() > CLAUSE_RESCALE_BOUND) {
             claRescalActivity();
+            this.order.setVarDecay(1 / this.params.getVarDecay());
         }
     }
 
@@ -1149,7 +1139,7 @@
             this.slistener.learnUnit(p);
             this.unitClauseConsumer.learnUnit(p);
         } else {
-            this.learner.learns(constr);
+            
         }
     }
 
