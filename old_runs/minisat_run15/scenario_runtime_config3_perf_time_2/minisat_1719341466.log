2024-06-25 19:51:07,020	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 8550346285726131
log_dir = _magpie_logs
work_dir = _magpie_work
local_original_copy = True
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 100
default_lengthout = 1e6
diff_method = unified
trust_local_filesystem = True
run_timeout = 100

[magpie.log]
color_output = True
format_info = {counter:<7} {status:<20} {best}{fitness} ({ratio}) [{size}] {cached} {log}
format_debug = patch({counter})="{patch}"{diffifbest}
format_fitness = {:.6f}
format_ratio = {:.2%%}
format_patchif = 
	 --> {patch}
format_diffif = 
	{diff}

[software]
path = examples/minisat
target_files = 
	core/Solver.cc.xml
software = BasicSoftware
model_rules = 
	*.params : ParamFileConfigModel
	*.xml : SrcmlModel
	* : LineModel
model_config = 
	*.params : [paramconfig]
	*.xml : [srcml]
init_cmd = bash init.sh
init_timeout = 60
init_lengthout = -1
setup_cmd = bash compile.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = bash compile.sh
compile_timeout = 
compile_lengthout = 
test_cmd = bash test.sh
test_timeout = 
test_lengthout = 
run_cmd = perf stat  bash run_fixed.sh
run_timeout = 
run_lengthout = 
retries = 2
batch_timeout = 
batch_lengthout = 
batch_bin_fitness_strategy = aggregate
batch_fitness_strategy = sum
fitness = perf_time

[srcml]
rename = 
	stmt: break continue decl_stmt do expr_stmt for goto if return switch while
	number: literal_number
focus = block stmt operator_comp operator_arith number
internodes = block
process_pseudo_blocks = True
process_literals = True
process_operators = True

[paramconfig]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
cli_none = hide
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = FirstImprovement
possible_edits = 
	SrcmlStmtReplacement
	SrcmlStmtInsertion
	SrcmlStmtDeletion
warmup = 3
warmup_strategy = last
max_steps = 10000
max_time = 70
target_fitness = 
cache_maxsize = 100
cache_keep = 0.2
batch_instances = 
batch_shuffle = True
batch_bin_shuffle = False
batch_sample_size = 1

[search.ls]
delete_prob = 0.5
max_neighbours = 
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5
batch_reset = True

[search.minify]
do_cleanup = True
do_rebuild = True
do_simplify = True
round_robin_limit = 3


2024-06-25 19:51:07,020	[DEBUG]	
2024-06-25 19:51:07,020	[INFO]	==== SEARCH: FirstImprovement ====
2024-06-25 19:51:07,020	[INFO]	~~~~ WARMUP ~~~~
2024-06-25 19:51:39,533	[DEBUG]	EXEC>  SUCCESS 13.828673185
2024-06-25 19:51:39,534	[INFO]	WARM    SUCCESS               13.828673 (--) [0 edit(s)]  
2024-06-25 19:52:07,553	[DEBUG]	EXEC>  SUCCESS 13.87564543
2024-06-25 19:52:07,553	[INFO]	WARM    SUCCESS               13.875645 (--) [0 edit(s)]  
2024-06-25 19:52:35,849	[DEBUG]	EXEC>  SUCCESS 14.01545947
2024-06-25 19:52:35,849	[INFO]	WARM    SUCCESS               14.015459 (--) [0 edit(s)]  
2024-06-25 19:52:35,849	[INFO]	REF     SUCCESS               14.015459 (--) [0 edit(s)]  
2024-06-25 19:52:35,849	[INFO]	
2024-06-25 19:52:35,849	[INFO]	~~~~ START ~~~~
2024-06-25 19:52:36,285	[INFO]	1       COMPILE_CODE_ERROR    None (--) [1 edit(s)]  
2024-06-25 19:52:36,285	[DEBUG]	patch(1)="SrcmlStmtReplacement(('core/Solver.cc.xml', 'stmt', 332), ('core/Solver.cc.xml', 'stmt', 206))"
2024-06-25 19:53:04,693	[DEBUG]	EXEC>  SUCCESS 13.23829683
2024-06-25 19:53:04,693	[INFO]	2       SUCCESS              *13.238297 (94.45%) [1 edit(s)]  
2024-06-25 19:53:04,693	[DEBUG]	patch(2)="SrcmlStmtDeletion(('core/Solver.cc.xml', 'stmt', 118))"
--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -351,43 +351,7 @@
     //
     int i, j;
     out_learnt.copyTo(analyze_toclear);
-    if (ccmin_mode == 2){
-        uint32_t abstract_level = 0;
-        for (i = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                abstract_level |= abstractLevel(var(out_learnt[i]));
-            }/*auto*/ // (maintain an abstraction of levels involved in conflict)
-
-        for (i = j = 1; i < out_learnt.size(); i++)
-            /*auto*/{
-                if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
-                /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
-                }/*auto*/
-            }/*auto*/
-        
-    }else if (ccmin_mode == 1){
-        for (i = j = 1; i < out_learnt.size(); i++){
-            Var x = var(out_learnt[i]);
-
-            if (reason(x) == CRef_Undef)
-                /*auto*/{
-                    out_learnt[j++] = out_learnt[i];
-                }/*auto*/
-            else{
-                Clause& c = ca[reason(var(out_learnt[i]))];
-                for (int k = 1; k < c.size(); k++)
-                    /*auto*/{
-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){
-                        out_learnt[j++] = out_learnt[i];
-                        break; }
-                    }/*auto*/
-            }
-        }
-    }else
-        /*auto*/{
-            i = j = out_learnt.size();
-        }/*auto*/
+    
 
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);

2024-06-25 19:53:05,118	[INFO]	3       COMPILE_CODE_ERROR    None (--) [2 edit(s)]  
2024-06-25 19:53:05,118	[DEBUG]	patch(3)="SrcmlStmtDeletion(('core/Solver.cc.xml', 'stmt', 118)) | SrcmlStmtInsertion(('core/Solver.cc.xml', '_inter_block', 456), ('core/Solver.cc.xml', 'stmt', 13))"
2024-06-25 19:53:57,229	[DEBUG]	EXEC>  LENGTHOUT None
2024-06-25 19:53:57,229	[INFO]	4       RUN_LENGTHOUT         None (--) [2 edit(s)]  
2024-06-25 19:53:57,229	[DEBUG]	patch(4)="SrcmlStmtDeletion(('core/Solver.cc.xml', 'stmt', 118)) | SrcmlStmtReplacement(('core/Solver.cc.xml', 'stmt', 226), ('core/Solver.cc.xml', 'stmt', 348))"
2024-06-25 19:53:57,233	[INFO]	~~~~ END ~~~~
2024-06-25 19:53:57,233	[INFO]	
2024-06-25 19:53:57,233	[INFO]	==== REPORT ====
2024-06-25 19:53:57,233	[INFO]	Termination: time budget
2024-06-25 19:53:57,233	[INFO]	Retries: 2
2024-06-25 19:53:57,233	[INFO]	Log file: /home/dbouras/magpie/_magpie_logs/minisat_1719341466.log
2024-06-25 19:53:57,234	[INFO]	Patch file: _magpie_logs/minisat_1719341466.patch
2024-06-25 19:53:57,234	[INFO]	Diff file: _magpie_logs/minisat_1719341466.diff
2024-06-25 19:53:57,234	[INFO]	Reference fitness: 14.015459
2024-06-25 19:53:57,234	[INFO]	Best fitness: 13.238297
2024-06-25 19:53:57,234	[INFO]	
2024-06-25 19:53:57,235	[INFO]	==== BEST PATCH ====
SrcmlStmtDeletion(('core/Solver.cc.xml', 'stmt', 118))
2024-06-25 19:53:57,235	[INFO]	
2024-06-25 19:53:57,235	[INFO]	==== DIFF ====
[1m--- before: core/Solver.cc[0m
[1m+++ after: core/Solver.cc[0m
[36m@@ -351,43 +351,7 @@[0m
     //
     int i, j;
     out_learnt.copyTo(analyze_toclear);
[31m-    if (ccmin_mode == 2){[0m
[31m-        uint32_t abstract_level = 0;[0m
[31m-        for (i = 1; i < out_learnt.size(); i++)[0m
[31m-            /*auto*/{[0m
[31m-                abstract_level |= abstractLevel(var(out_learnt[i]));[0m
[31m-            }/*auto*/ // (maintain an abstraction of levels involved in conflict)[0m
[31m-[0m
[31m-        for (i = j = 1; i < out_learnt.size(); i++)[0m
[31m-            /*auto*/{[0m
[31m-                if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))[0m
[31m-                /*auto*/{[0m
[31m-                    out_learnt[j++] = out_learnt[i];[0m
[31m-                }/*auto*/[0m
[31m-            }/*auto*/[0m
[31m-        [0m
[31m-    }else if (ccmin_mode == 1){[0m
[31m-        for (i = j = 1; i < out_learnt.size(); i++){[0m
[31m-            Var x = var(out_learnt[i]);[0m
[31m-[0m
[31m-            if (reason(x) == CRef_Undef)[0m
[31m-                /*auto*/{[0m
[31m-                    out_learnt[j++] = out_learnt[i];[0m
[31m-                }/*auto*/[0m
[31m-            else{[0m
[31m-                Clause& c = ca[reason(var(out_learnt[i]))];[0m
[31m-                for (int k = 1; k < c.size(); k++)[0m
[31m-                    /*auto*/{[0m
[31m-                        if (!seen[var(c[k])] && level(var(c[k])) > 0){[0m
[31m-                        out_learnt[j++] = out_learnt[i];[0m
[31m-                        break; }[0m
[31m-                    }/*auto*/[0m
[31m-            }[0m
[31m-        }[0m
[31m-    }else[0m
[31m-        /*auto*/{[0m
[31m-            i = j = out_learnt.size();[0m
[31m-        }/*auto*/[0m
[32m+    [0m
 
     max_literals += out_learnt.size();
     out_learnt.shrink(i - j);

