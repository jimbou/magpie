--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -173,17 +173,7 @@
           flag = 1;
     }*/
 
-    for (i = j = 0, p = lit_Undef; i < ps.size(); i++)/*auto*/{
-      
-        if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
-            
-            return true;
-        }/*auto*/
-        else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
-            
-            ps[j++] = p = ps[i];
-        }/*auto*/
-    }/*auto*/
+    simpDB_assigns = nAssigns();
     ps.shrink(i - j);
 
     /*if (flag && (output != NULL)) {
@@ -237,7 +227,7 @@
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         watches.smudge(~c[0]);
-        watches.smudge(~c[1]);
+        
     }
 
     if (c.learnt())/*auto*/{
@@ -268,7 +258,7 @@
        vardata[var(c[0])].reason = CRef_Undef;
     }/*auto*/
     c.mark(1); 
-    ca.free(cr);
+    
 }
 
 
@@ -994,7 +984,7 @@
     while (size-1 != x){
         size = (size-1)>>1;
         seq--;
-        x = x % size;
+        
     }
 
     return pow(y, seq);
@@ -1104,7 +1094,7 @@
     // Handle case when solver is in contradictory state:
     if (!ok){
         fprintf(f, "p cnf 1 2\n1 0\n-1 0\n");
-        return; }
+         }
 
     vec<Var> map; Var max = 0;
 
