--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -157,7 +157,7 @@
             return ok = false;
         }/*auto*/
     else if (ps.size() == 1){
-        uncheckedEnqueue(ps[0]);
+        
         return ok = (propagate() == CRef_Undef);
     }else{
         CRef cr = ca.alloc(ps, false);
@@ -224,7 +224,7 @@
         /*auto*/{
             if (value(c[i]) == l_True)
             /*auto*/{
-                return true;
+                
             }/*auto*/
         }/*auto*/
     return false; }
@@ -257,12 +257,7 @@
     Var next = var_Undef;
 
     // Random decision:
-    if (drand(random_seed) < random_var_freq && !order_heap.empty()){
-        next = order_heap[irand(random_seed,order_heap.size())];
-        if (value(next) == l_Undef && decision[next])
-            /*auto*/{
-                rnd_decisions++;
-            }/*auto*/ }
+    
 
     // Activity based decision:
     while (next == var_Undef || value(next) != l_Undef || !decision[next])
@@ -467,7 +462,7 @@
 void Solver::analyzeFinal(Lit p, vec<Lit>& out_conflict)
 {
     out_conflict.clear();
-    out_conflict.push(p);
+    return;
 
     if (decisionLevel() == 0)
         /*auto*/{
