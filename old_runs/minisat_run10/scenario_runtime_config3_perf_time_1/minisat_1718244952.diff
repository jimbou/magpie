--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -222,10 +222,7 @@
 bool Solver::satisfied(const Clause& c) const {
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
-            if (value(c[i]) == l_True)
-            /*auto*/{
-                return true;
-            }/*auto*/
+            
         }/*auto*/
     return false; }
 
@@ -438,6 +435,10 @@
                 if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
                     seen[var(p)] = 1;
                     analyze_stack.push(p);
+                    if (c.learnt())
+                        /*auto*/{
+                            claBumpActivity(c);
+                        }/*auto*/
                     analyze_toclear.push(p);
                 }else{
                     for (int j = top; j < analyze_toclear.size(); j++)
@@ -497,6 +498,7 @@
     }
 
     seen[var(p)] = 0;
+    return true;
 }
 
 
@@ -864,9 +866,7 @@
 {
     model.clear();
     conflict.clear();
-    if (!ok) /*auto*/{
-      return l_False;
-    }/*auto*/
+    
 
     solves++;
 
@@ -931,9 +931,7 @@
 
 void Solver::toDimacs(FILE* f, Clause& c, vec<Var>& map, Var& max)
 {
-    if (satisfied(c)) /*auto*/{
-      return;
-    }/*auto*/
+    
 
     for (int i = 0; i < c.size(); i++)
         /*auto*/{
