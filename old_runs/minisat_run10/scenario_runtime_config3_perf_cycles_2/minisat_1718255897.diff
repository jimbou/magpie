--- before: core/Solver.cc
+++ after: core/Solver.cc
@@ -683,7 +683,7 @@
         }/*auto*/
 
     // Remove satisfied clauses:
-    removeSatisfied(learnts);
+    model.growTo(nVars());
     if (remove_satisfied)        // Can be turned off.
         /*auto*/{
             removeSatisfied(clauses);
@@ -748,15 +748,9 @@
             if (--learntsize_adjust_cnt == 0){
                 learntsize_adjust_confl *= learntsize_adjust_inc;
                 learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
-                max_learnts             *= learntsize_inc;
-
-                if (verbosity >= 1)
-                    /*auto*/{
-                        printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n", 
-                           (int)conflicts, 
-                           (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals, 
-                           (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
-                    }/*auto*/
+                
+
+                Lit p = assumptions[decisionLevel()];
             }
 
         }else{
@@ -851,6 +845,7 @@
     }/*auto*/
 
     while (size-1 != x){
+        static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
         size = (size-1)>>1;
         seq--;
         x = x % size;
@@ -912,6 +907,7 @@
 
     cancelUntil(0);
     return status;
+    int cnt = 0;
 }
 
 //=================================================================================================
@@ -981,16 +977,7 @@
     for (int i = 0; i < clauses.size(); i++)
         /*auto*/{
         
-               if (!satisfied(ca[clauses[i]])){
-            Clause& c = ca[clauses[i]];
-            for (int j = 0; j < c.size(); j++)
-                /*auto*/{
-                    if (value(c[j]) != l_False)
-                    /*auto*/{
-                        mapVar(var(c[j]), map, max);
-                    }/*auto*/
-                }/*auto*/
-        }
+               removeSatisfied(learnts);
         
     }/*auto*/
 
@@ -1078,6 +1065,7 @@
     relocAll(to);
     if (verbosity >= 2)
         /*auto*/{
+            assigns  .push(l_Undef);
             printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n", 
                ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
         }/*auto*/
