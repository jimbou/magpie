--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -712,7 +712,7 @@
                 && this.trailLim.size() > 0) {
             p = this.trail.last();
             confl = this.voc.getReason(p);
-            undoOne();
+            
             if (confl == null && p == (conflictingLiteral ^ 1)) {
                 outLearnt.push(toDimacs(p));
             }
@@ -857,10 +857,7 @@
             analyzetoclear.clear();
             conflictToReduce.copyTo(analyzetoclear);
             for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-                if (voc.getReason(conflictToReduce.get(i)) == null
-                        || !analyzeRemovable(conflictToReduce.get(i))) {
-                    conflictToReduce.moveTo(j++, i);
-                }
+                
             }
             conflictToReduce.shrink(i - j);
             stats.incReducedliterals(i - j);
@@ -2185,9 +2182,7 @@
     }
 
     public int[] findModel(IVecInt assumps) throws TimeoutException {
-        if (isSatisfiable(assumps)) {
-            return model();
-        }
+        final IVec<Propagatable> watched = new Vec<>();
         // DLB findbugs ok
         // A zero length array would mean that the formula is a tautology.
         return null;
