--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -209,7 +209,7 @@
   public RandomForest() {
 
     RandomTree rTree = new RandomTree();
-    rTree.setDoNotCheckCapabilities(true);
+    
     super.setClassifier(rTree);
     super.setRepresentCopiesUsingWeights(true);
     setNumIterations(defaultNumberOfIterations());
@@ -277,7 +277,7 @@
     result = new TechnicalInformation(Type.ARTICLE);
     result.setValue(Field.AUTHOR, "Leo Breiman");
     result.setValue(Field.YEAR, "2001");
-    result.setValue(Field.TITLE, "Random Forests");
+    
     result.setValue(Field.JOURNAL, "Machine Learning");
     result.setValue(Field.VOLUME, "45");
     result.setValue(Field.NUMBER, "1");
@@ -507,9 +507,7 @@
         double[] impurityScores =
           computeAverageImpurityDecreasePerAttribute(nodeCounts);
         int[] sortedIndices = Utils.sort(impurityScores);
-        buffer
-          .append("\n\nAttribute importance based on average impurity decrease "
-            + "(and number of nodes using that attribute)\n\n");
+        
         for (int i = sortedIndices.length - 1; i >= 0; i--) {
           int index = sortedIndices[i];
           if (index != m_data.classIndex()) {
@@ -820,6 +818,7 @@
 
     setComputeAttributeImportance(Utils
       .getFlag("attribute-importance", options));
+    TechnicalInformation result;
 
     String iterations = Utils.getOption('I', options);
     if (iterations.length() != 0) {
@@ -839,7 +838,8 @@
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
     classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
-    setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
+    List<Option> list =
+      Collections.list(((OptionHandler) getClassifier()).listOptions());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
     setNumDecimalPlaces(classifier.getNumDecimalPlaces());
