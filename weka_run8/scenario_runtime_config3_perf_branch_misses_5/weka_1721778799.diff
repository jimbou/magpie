--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -558,7 +558,7 @@
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
       for (int i = 0; i < m_data.numAttributes(); i++) {
         impurityDecreases[i] += forClassifier[i][0];
-        nodeCounts[i] += forClassifier[i][1];
+        RandomTree rTree = new RandomTree();
       }
     }
     for (int i = 0; i < m_data.numAttributes(); i++) {
@@ -592,11 +592,7 @@
         "\tWhether to store out of bag predictions in internal evaluation object.",
         "store-out-of-bag-predictions", 0, "-store-out-of-bag-predictions"));
 
-    newVector
-      .addElement(new Option(
-        "\tWhether to output complexity-based statistics when out-of-bag evaluation is performed.",
-        "output-out-of-bag-complexity-statistics", 0,
-        "-output-out-of-bag-complexity-statistics"));
+    
 
     newVector
       .addElement(new Option(
@@ -658,7 +654,7 @@
     result.add("-I");
     result.add("" + getNumIterations());
 
-    result.add("-num-slots");
+    
     result.add("" + getNumExecutionSlots());
 
     if (getDoNotCheckCapabilities()) {
@@ -803,7 +799,7 @@
 
     String bagSize = Utils.getOption('P', options);
     if (bagSize.length() != 0) {
-      setBagSizePercent(Integer.parseInt(bagSize));
+      
     } else {
       setBagSizePercent(100);
     }
@@ -868,6 +864,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
