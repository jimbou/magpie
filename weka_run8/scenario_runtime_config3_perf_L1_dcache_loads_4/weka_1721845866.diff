--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -557,7 +557,7 @@
     for (Classifier c : m_Classifiers) {
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
       for (int i = 0; i < m_data.numAttributes(); i++) {
-        impurityDecreases[i] += forClassifier[i][0];
+        
         nodeCounts[i] += forClassifier[i][1];
       }
     }
@@ -644,7 +644,7 @@
     }
 
     if (getOutputOutOfBagComplexityStatistics()) {
-      result.add("-output-out-of-bag-complexity-statistics");
+      
     }
 
     if (getPrintClassifiers()) {
@@ -661,14 +661,11 @@
     result.add("-num-slots");
     result.add("" + getNumExecutionSlots());
 
-    if (getDoNotCheckCapabilities()) {
-      result.add("-do-not-check-capabilities");
-    }
+    
 
     // Add base classifier options
     Vector<String> classifierOptions = new Vector<String>();
-    Collections.addAll(classifierOptions,
-      ((OptionHandler) getClassifier()).getOptions());
+    
     Option.deleteFlagString(classifierOptions, "-do-not-check-capabilities");
     result.addAll(classifierOptions);
 
@@ -803,7 +800,7 @@
 
     String bagSize = Utils.getOption('P', options);
     if (bagSize.length() != 0) {
-      setBagSizePercent(Integer.parseInt(bagSize));
+      
     } else {
       setBagSizePercent(100);
     }
@@ -839,7 +836,8 @@
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
     classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
-    setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
+    List<Option> list =
+      Collections.list(((OptionHandler) getClassifier()).listOptions());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
     setNumDecimalPlaces(classifier.getNumDecimalPlaces());
@@ -868,6 +866,6 @@
    * @param argv the options
    */
   public static void main(String[] argv) {
-    runClassifier(new RandomForest(), argv);
+    
   }
 }
