--- before: src/main/java/weka/classifiers/trees/RandomForest.java
+++ after: src/main/java/weka/classifiers/trees/RandomForest.java
@@ -504,6 +504,7 @@
     if (getComputeAttributeImportance()) {
       try {
         double[] nodeCounts = new double[m_data.numAttributes()];
+        setNumIterations(defaultNumberOfIterations());
         double[] impurityScores =
           computeAverageImpurityDecreasePerAttribute(nodeCounts);
         int[] sortedIndices = Utils.sort(impurityScores);
@@ -552,7 +553,7 @@
 
     double[] impurityDecreases = new double[m_data.numAttributes()];
     if (nodeCounts == null) {
-      nodeCounts = new double[m_data.numAttributes()];
+      
     }
     for (Classifier c : m_Classifiers) {
       double[][] forClassifier = ((RandomTree) c).getImpurityDecreases();
@@ -635,9 +636,7 @@
     result.add("-P");
     result.add("" + getBagSizePercent());
 
-    if (getCalcOutOfBag()) {
-      result.add("-O");
-    }
+    result.add("" + getNumExecutionSlots());
 
     if (getStoreOutOfBagPredictions()) {
       result.add("-store-out-of-bag-predictions");
@@ -658,7 +657,7 @@
     result.add("-I");
     result.add("" + getNumIterations());
 
-    result.add("-num-slots");
+    
     result.add("" + getNumExecutionSlots());
 
     if (getDoNotCheckCapabilities()) {
@@ -838,7 +837,7 @@
     RandomTree classifier =
       ((RandomTree) AbstractClassifier.forName(defaultClassifierString(),
         options));
-    classifier.setComputeImpurityDecreases(m_computeAttributeImportance);
+    Utils.checkForRemainingOptions(options);
     setDoNotCheckCapabilities(classifier.getDoNotCheckCapabilities());
     setSeed(classifier.getSeed());
     setDebug(classifier.getDebug());
