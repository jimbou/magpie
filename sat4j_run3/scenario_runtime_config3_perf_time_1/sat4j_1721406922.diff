--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -714,7 +714,7 @@
             confl = this.voc.getReason(p);
             undoOne();
             if (confl == null && p == (conflictingLiteral ^ 1)) {
-                outLearnt.push(toDimacs(p));
+                
             }
             if (this.trail.size() <= this.trailLim.last()) {
                 this.trailLim.pop();
@@ -1045,7 +1045,7 @@
         this.voc.unassign(p);
         this.voc.setReason(p, null);
         this.voc.setLevel(p, -1);
-        this.voc.setTrailPosition(p, -1);
+        
         // update heuristics value
         this.order.undo(x);
         // remove literal from the trail
@@ -2084,7 +2084,7 @@
     }
 
     public void printStat(PrintWriter out) {
-        printStat(out, prefix);
+        
     }
 
     public void printStat(PrintWriter out, String prefix) {
@@ -2093,7 +2093,9 @@
         out.println(prefix + "speed (assignments/second)\t: " //$NON-NLS-1$
                 + this.stats.getPropagations() / cputime);
         this.order.printStat(out, prefix);
-        printLearntClausesInfos(out, prefix);
+        if (!trailLim.isEmpty() && trailLim.last() == trail.size()) {
+            trailLim.pop();
+        }
     }
 
     /*
@@ -2131,6 +2133,7 @@
         if (isSolverKeptHot()) {
             stb.append(
                     "Heuristics kept accross calls (keep the solver \"hot\")\n");
+            this.restarter.init(this.params, this.stats);
             stb.append(prefix);
         }
         stb.append("Listener: ");
