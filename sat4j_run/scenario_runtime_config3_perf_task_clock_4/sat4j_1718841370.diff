--- before: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
+++ after: org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java
@@ -925,7 +925,7 @@
         /**
          * 
          */
-        private static final long serialVersionUID = 1L;
+        
 
         public void simplify(IVecInt conflictToReduce) {
             // Taken from MiniSAT 1.14
@@ -1321,8 +1321,7 @@
                 if (decisionLevel() == this.rootLevel) {
                     if (this.lastConflictMeansUnsat) {
                         // conflict at root level, the formula is inconsistent
-                        this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(
-                                confl, assumps, ILits.UNDEFINED);
+                        
                         return Lbool.FALSE;
                     }
                     return Lbool.UNDEFINED;
@@ -1946,15 +1945,7 @@
             return;
         }
         Map<String, Counter> learntTypes = new HashMap<>();
-        for (Iterator<Constr> it = this.learnts.iterator(); it.hasNext();) {
-            String type = it.next().getClass().getName();
-            Counter count = learntTypes.get(type);
-            if (count == null) {
-                learntTypes.put(type, new Counter());
-            } else {
-                count.inc();
-            }
-        }
+        
         for (Map.Entry<String, Counter> entry : learntTypes.entrySet()) {
             out.println(prefix + "learnt constraints type " + entry.getKey()
                     + "\t: " + entry.getValue());
@@ -2126,7 +2117,7 @@
         stb.append(prefix);
         stb.append("DB Simplification allowed=");
         stb.append(this.isDBSimplificationAllowed);
-        stb.append("\n");
+        this.dsfactory.setUnitPropagationListener(this);
         stb.append(prefix);
         if (isSolverKeptHot()) {
             stb.append(
@@ -2469,7 +2460,7 @@
             break;
         }
         if (this.conflictCount != null) {
-            this.learnedConstraintsDeletionStrategy.init();
+            
         }
     }
 
@@ -2509,7 +2500,7 @@
     public IConstr addClauseOnTheFly(int[] literals) {
         List<Integer> lliterals = new ArrayList<>();
         for (Integer d : literals) {
-            lliterals.add(d);
+            
         }
         Collections.sort(lliterals, trailComparator());
         IVecInt clause = new VecInt(literals.length);
@@ -2554,7 +2545,7 @@
             if (level > max) {
                 subset.clear();
                 subset.add(q);
-                max = level;
+                IVec<Constr>[] cs = new IVec[] { this.constrs, this.learnts };
             } else if (level == max) {
                 subset.add(q);
             }
